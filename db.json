{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":0},{"_id":"themes/hiker/source/avatar.jpg","path":"avatar.jpg","modified":0,"renderable":1},{"_id":"source/images/wechat.jpg","path":"images/wechat.jpg","modified":0,"renderable":0},{"_id":"themes/hiker/source/css/archive.css","path":"css/archive.css","modified":0,"renderable":1},{"_id":"themes/hiker/source/css/dialog.css","path":"css/dialog.css","modified":0,"renderable":1},{"_id":"themes/hiker/source/css/header-post.css","path":"css/header-post.css","modified":0,"renderable":1},{"_id":"themes/hiker/source/css/home.css","path":"css/home.css","modified":0,"renderable":1},{"_id":"themes/hiker/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hiker/source/css/vdonate.css","path":"css/vdonate.css","modified":0,"renderable":1},{"_id":"themes/hiker/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/hiker/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/hiker/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/hiker/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/hiker/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/hiker/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/hiker/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hiker/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/hiker/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/hiker/source/js/home.js","path":"js/home.js","modified":0,"renderable":1},{"_id":"themes/hiker/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/hiker/source/js/dialog.js","path":"js/dialog.js","modified":0,"renderable":1},{"_id":"themes/hiker/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/hiker/source/js/scripts.js","path":"js/scripts.js","modified":0,"renderable":1},{"_id":"themes/hiker/source/preview/browser-support.png","path":"preview/browser-support.png","modified":0,"renderable":1},{"_id":"themes/hiker/source/js/vdonate.js","path":"js/vdonate.js","modified":0,"renderable":1},{"_id":"themes/hiker/source/preview/donation-btn.png","path":"preview/donation-btn.png","modified":0,"renderable":1},{"_id":"themes/hiker/source/preview/theme-color.png","path":"preview/theme-color.png","modified":0,"renderable":1},{"_id":"themes/hiker/source/preview/preview-abstract.png","path":"preview/preview-abstract.png","modified":0,"renderable":1},{"_id":"themes/hiker/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/hiker/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/hiker/source/js/jquery-3.1.1.min.js","path":"js/jquery-3.1.1.min.js","modified":0,"renderable":1},{"_id":"themes/hiker/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hiker/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hiker/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hiker/source/css/images/avatar.jpg","path":"css/images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hiker/source/css/images/homelogo.jpg","path":"css/images/homelogo.jpg","modified":0,"renderable":1},{"_id":"themes/hiker/source/css/images/mylogo.jpg","path":"css/images/mylogo.jpg","modified":0,"renderable":1},{"_id":"themes/hiker/source/css/images/rocket.png","path":"css/images/rocket.png","modified":0,"renderable":1},{"_id":"themes/hiker/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/hiker/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/hiker/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/hiker/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/hiker/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/hiker/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/hiker/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hiker/source/css/images/sample.jpg","path":"css/images/sample.jpg","modified":0,"renderable":1},{"_id":"themes/hiker/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/photography/other/gallery/electronic_products.jpg","path":"photography/other/gallery/electronic_products.jpg","modified":0,"renderable":0},{"_id":"source/photography/other/gallery/workbench_keyboard.jpg","path":"photography/other/gallery/workbench_keyboard.jpg","modified":0,"renderable":0},{"_id":"source/photography/person/gallery/chuyuancheng_cq.jpg","path":"photography/person/gallery/chuyuancheng_cq.jpg","modified":0,"renderable":0},{"_id":"source/photography/person/gallery/cq_local_snack.jpg","path":"photography/person/gallery/cq_local_snack.jpg","modified":0,"renderable":0},{"_id":"source/photography/person/gallery/hufeifei_cq.jpg","path":"photography/person/gallery/hufeifei_cq.jpg","modified":0,"renderable":0},{"_id":"source/photography/person/gallery/kangshanming_black_cq.jpg","path":"photography/person/gallery/kangshanming_black_cq.jpg","modified":0,"renderable":0},{"_id":"source/photography/person/gallery/liulinjie_cq.jpg","path":"photography/person/gallery/liulinjie_cq.jpg","modified":0,"renderable":0},{"_id":"source/photography/person/gallery/zhuqianli_cq.jpg","path":"photography/person/gallery/zhuqianli_cq.jpg","modified":0,"renderable":0},{"_id":"source/photography/scenery/gallery/airplane_wing.jpg","path":"photography/scenery/gallery/airplane_wing.jpg","modified":0,"renderable":0},{"_id":"source/photography/scenery/gallery/cq_cacalu.jpg","path":"photography/scenery/gallery/cq_cacalu.jpg","modified":0,"renderable":0},{"_id":"themes/hiker/source/css/images/WechatIMG34.jpeg","path":"css/images/WechatIMG34.jpeg","modified":0,"renderable":1},{"_id":"themes/hiker/source/css/images/IMG_4872.jpg","path":"css/images/IMG_4872.jpg","modified":0,"renderable":1},{"_id":"themes/hiker/source/css/images/WechatIMG28.jpeg","path":"css/images/WechatIMG28.jpeg","modified":0,"renderable":1},{"_id":"themes/hiker/source/preview/preview-mobile.png","path":"preview/preview-mobile.png","modified":0,"renderable":1},{"_id":"themes/hiker/source/css/images/IMG_4613.jpg","path":"css/images/IMG_4613.jpg","modified":0,"renderable":1},{"_id":"themes/hiker/source/css/images/WechatIMG35.jpeg","path":"css/images/WechatIMG35.jpeg","modified":0,"renderable":1},{"_id":"source/photography/car/gallery/car_dirty.jpg","path":"photography/car/gallery/car_dirty.jpg","modified":0,"renderable":0},{"_id":"source/photography/car/gallery/golf_cockpit.jpg","path":"photography/car/gallery/golf_cockpit.jpg","modified":0,"renderable":0},{"_id":"themes/hiker/source/css/images/WechatIMG39.jpeg","path":"css/images/WechatIMG39.jpeg","modified":0,"renderable":1},{"_id":"themes/hiker/source/css/images/pose.jpg","path":"css/images/pose.jpg","modified":0,"renderable":1},{"_id":"source/photography/car/gallery/giant_bicycle.jpg","path":"photography/car/gallery/giant_bicycle.jpg","modified":0,"renderable":0},{"_id":"themes/hiker/source/css/images/IMG_4481.jpg","path":"css/images/IMG_4481.jpg","modified":0,"renderable":1},{"_id":"themes/hiker/source/css/images/home-bg.jpg","path":"css/images/home-bg.jpg","modified":0,"renderable":1},{"_id":"source/photography/person/gallery/kangshanming_cq_bridge.jpg","path":"photography/person/gallery/kangshanming_cq_bridge.jpg","modified":0,"renderable":0},{"_id":"source/photography/scenery/gallery/hz_xixing_bridge.jpg","path":"photography/scenery/gallery/hz_xixing_bridge.jpg","modified":0,"renderable":0},{"_id":"themes/hiker/source/preview/code-theme.jpg","path":"preview/code-theme.jpg","modified":0,"renderable":1},{"_id":"source/photography/car/gallery/golf_steering_wheel.jpg","path":"photography/car/gallery/golf_steering_wheel.jpg","modified":0,"renderable":0},{"_id":"source/photography/other/gallery/dolls.jpg","path":"photography/other/gallery/dolls.jpg","modified":0,"renderable":0},{"_id":"themes/hiker/source/css/images/WechatIMG32.jpeg","path":"css/images/WechatIMG32.jpeg","modified":0,"renderable":1},{"_id":"source/photography/scenery/gallery/hz_xs_gym.jpg","path":"photography/scenery/gallery/hz_xs_gym.jpg","modified":0,"renderable":0},{"_id":"source/photography/scenery/gallery/yangtze_river_cableway.jpg","path":"photography/scenery/gallery/yangtze_river_cableway.jpg","modified":0,"renderable":0},{"_id":"source/photography/scenery/gallery/chongqing_bridge.jpg","path":"photography/scenery/gallery/chongqing_bridge.jpg","modified":0,"renderable":0},{"_id":"themes/hiker/source/preview/preview-pc.png","path":"preview/preview-pc.png","modified":0,"renderable":1},{"_id":"source/photography/person/gallery/hf_WestLake.jpg","path":"photography/person/gallery/hf_WestLake.jpg","modified":0,"renderable":0},{"_id":"source/photography/person/gallery/self_jump.jpg","path":"photography/person/gallery/self_jump.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"d6e60d4c49b78ad64071b22d106b698c04075f86","modified":1530550463851},{"_id":"themes/hiker/.DS_Store","hash":"f09a86bb4ce7d04901ec1bb4cb55bee99909840c","modified":1530463908702},{"_id":"themes/hiker/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1530113725550},{"_id":"themes/hiker/.travis.yml","hash":"24851843a40973daaee47b2697e8b0dc4e6556b3","modified":1530113725551},{"_id":"themes/hiker/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1530113725551},{"_id":"themes/hiker/LICENSE","hash":"4ea4173f28adf2f688a59e3c5e6fa833bcdf7ced","modified":1530113725551},{"_id":"themes/hiker/README.cn.md","hash":"e87c3744f1fe3edeaad479a90e7e1aa66bbf6fd2","modified":1530113725551},{"_id":"themes/hiker/_config.yml","hash":"f51b8b6602f32ae443ac5e7006f5eeeee98fe00d","modified":1530464220143},{"_id":"themes/hiker/README.md","hash":"4973def0c3cb2ac856071de479d11ff76087b8c6","modified":1530113725551},{"_id":"themes/hiker/package.json","hash":"ac7430d36de467f41a686fb716c8538c52f0e206","modified":1530113725560},{"_id":"source/_posts/fork-join-framework.md","hash":"be1f2f6f2a09a4361df90ba6cee23411bc8e1feb","modified":1530638072730},{"_id":"source/about/index.md","hash":"d79710fc0f115568bde0c114ca7d1079daf56ed8","modified":1530553529329},{"_id":"source/categories/index.md","hash":"9a7b593d14dbe5ba9f3716bed64d9223ba5b9717","modified":1530553529329},{"_id":"source/images/alipay.jpg","hash":"cd6d05a94694f72b6853906f5e587c8acbf4fbb5","modified":1530553529329},{"_id":"source/photography/index.md","hash":"a65963fb0e001effe2490e754205e5e3beafe9d0","modified":1530553529337},{"_id":"source/photography/.DS_Store","hash":"deee03cbdc3a69f814d12cf762886450c3fa11cb","modified":1530553454215},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1530551466506},{"_id":"source/tags/index.md","hash":"431a3c8b8b99a89fec55ad78df5539ef2eaa1e8b","modified":1530553529434},{"_id":"themes/hiker/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1530113725542},{"_id":"themes/hiker/.git/config","hash":"8bcee997383ccb20c23d8654220b0a65b9abd4b3","modified":1530113725544},{"_id":"themes/hiker/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1530112993206},{"_id":"themes/hiker/.git/index","hash":"fe9146e12217d8ff10b795bf740044eb16d8fbe1","modified":1530393458297},{"_id":"themes/hiker/.git/packed-refs","hash":"696304ba0009092efc58372e51d0b46aa69df50c","modified":1530113725538},{"_id":"themes/hiker/languages/de.yml","hash":"3e244f9c48b641edd821bdeb743bdbcd0919685f","modified":1530113725552},{"_id":"themes/hiker/languages/default.yml","hash":"22ab885c29bf8812d799df29211346783a39d278","modified":1530113725552},{"_id":"themes/hiker/languages/en.yml","hash":"22ab885c29bf8812d799df29211346783a39d278","modified":1530113725552},{"_id":"themes/hiker/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1530113725552},{"_id":"themes/hiker/languages/fr.yml","hash":"f5ec801074df04e1e1fd097fa7cbdf7f57330374","modified":1530113725552},{"_id":"themes/hiker/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1530113725552},{"_id":"themes/hiker/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1530113725552},{"_id":"themes/hiker/languages/pt.yml","hash":"46bd5f121f4704e2cd6c0950ec18b549f03bfe5c","modified":1530113725552},{"_id":"themes/hiker/languages/zh-CN.yml","hash":"db3a630cf05a74568355a6213d9f896488eb6f87","modified":1530387384310},{"_id":"themes/hiker/layout/archive.ejs","hash":"877ed5677c6fc12a3050843dd3d97cb6b53caceb","modified":1530113725558},{"_id":"themes/hiker/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1530113725553},{"_id":"themes/hiker/languages/zh-TW.yml","hash":"7672fbe7ee9c166f77bc644647295f5886cbc50e","modified":1530113725553},{"_id":"themes/hiker/layout/categories.ejs","hash":"ac33c728b49863d3ca961547d33209618f591e4f","modified":1530113725559},{"_id":"themes/hiker/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1530113725559},{"_id":"themes/hiker/layout/layout.ejs","hash":"aa685e9762a356f9b677e6f9d17e04694492fb83","modified":1530113725559},{"_id":"themes/hiker/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1530113725559},{"_id":"themes/hiker/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1530113725559},{"_id":"themes/hiker/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1530113725559},{"_id":"themes/hiker/layout/tags.ejs","hash":"340ded907f5f52ef73c50bb9f1f27bf2f5de3fa7","modified":1530113725560},{"_id":"themes/hiker/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1530113725560},{"_id":"themes/hiker/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1530113725560},{"_id":"themes/hiker/source/.DS_Store","hash":"71de49345b332e02516e8cd5f553d3a97c7c0bf7","modified":1530463915969},{"_id":"themes/hiker/source/avatar.jpg","hash":"163b3c9489c17d20a213142d1880982f1d8f7613","modified":1479054557000},{"_id":"source/images/wechat.jpg","hash":"1ed176c1ced09d58560507dde18623cfa57d00e6","modified":1530553529330},{"_id":"source/photography/car/index.md","hash":"c006ef0fa0d9c21f1827280dcebd7b5c89fe4965","modified":1530553529337},{"_id":"source/photography/other/.DS_Store","hash":"a4a24cb8bb2acaaf974c0765dcca4ff1d365dcdd","modified":1530553528623},{"_id":"source/photography/car/.DS_Store","hash":"93c1acd24441b873abfc12620fb93fafde8a118f","modified":1530452240825},{"_id":"source/photography/other/index.md","hash":"0ac0980a92ea7c28ed865f2f2c35f66ce3bdc15c","modified":1530553529343},{"_id":"source/photography/person/index.md","hash":"224d24a65cffa3bc17249eb1c8f9dbd84246ad54","modified":1530553529418},{"_id":"source/photography/person/.DS_Store","hash":"b361b9cd9fc375a5ec96456d7f664319c795a673","modified":1530553454220},{"_id":"source/photography/scenery/.DS_Store","hash":"93c1acd24441b873abfc12620fb93fafde8a118f","modified":1530450470583},{"_id":"source/photography/scenery/index.md","hash":"a7a87aa1299414376a47361ca84465a25a0da62f","modified":1530553529433},{"_id":"themes/hiker/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1530112993207},{"_id":"themes/hiker/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1530112993208},{"_id":"themes/hiker/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1530112993209},{"_id":"themes/hiker/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1530112993209},{"_id":"themes/hiker/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1530112993207},{"_id":"themes/hiker/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1530112993209},{"_id":"themes/hiker/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1530112993209},{"_id":"themes/hiker/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1530112993206},{"_id":"themes/hiker/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1530112993207},{"_id":"themes/hiker/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1530112993208},{"_id":"themes/hiker/.git/logs/HEAD","hash":"fcca627c817792a90ea5e3a69f33d1619f89774d","modified":1530113725543},{"_id":"themes/hiker/layout/_partial/after-footer.ejs","hash":"cf844d9dda22b63e990c2b9e5c8bee82c41fd3aa","modified":1530113725553},{"_id":"themes/hiker/layout/_partial/archive-post.ejs","hash":"55d661b63ffe41489bffe4d0570af50a1b952d63","modified":1530113725553},{"_id":"themes/hiker/layout/_partial/article.ejs","hash":"86e93d0716da936a14b658510a2d39d8a1f90a16","modified":1530113725553},{"_id":"themes/hiker/layout/_partial/archive.ejs","hash":"538346df9267cb701bb985faf0d5de2fa4c1e4e7","modified":1530113725553},{"_id":"themes/hiker/layout/_partial/comment.ejs","hash":"1471bafc3e1b348cdd081ad8f79e6656323ec04b","modified":1530113725554},{"_id":"themes/hiker/layout/_partial/baidu-analytics.ejs","hash":"5776714a003d2b96b04b5399f67e0899d821247e","modified":1530113725554},{"_id":"themes/hiker/layout/_partial/busuanzi-analytics.ejs","hash":"7de568681c315e88127bec120b8100ce6640210f","modified":1530113725554},{"_id":"themes/hiker/layout/_partial/dialog.ejs","hash":"626cc439d42a8bcaffcf2d546b667859d50d9860","modified":1530391424285},{"_id":"themes/hiker/layout/_partial/facebook-sdk.ejs","hash":"06038db50d2e1febdefa3f8e1512b332c7da5a17","modified":1530113725555},{"_id":"themes/hiker/layout/_partial/cnzz-analytics.ejs","hash":"87410fedf15383f119706c96f71552be14248d57","modified":1530113725554},{"_id":"themes/hiker/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1530113725555},{"_id":"themes/hiker/layout/_partial/footer.ejs","hash":"48163e70e742841d14dd22a67ae666b622637c62","modified":1530382208418},{"_id":"themes/hiker/layout/_partial/donate.ejs","hash":"046e168c6aad9889199c9a48b57dc973b4f46dab","modified":1530113725555},{"_id":"themes/hiker/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1530113725555},{"_id":"themes/hiker/layout/_partial/head.ejs","hash":"36e3b26ecfd587cc220a830e6ad1b1d7ea05acb2","modified":1530113725556},{"_id":"themes/hiker/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1530113725556},{"_id":"themes/hiker/layout/_partial/header.ejs","hash":"6b7f1aa80d3beedd43acf8952c282e4c0c44ce83","modified":1530436226419},{"_id":"themes/hiker/layout/_partial/header-post.ejs","hash":"e80d19f4f18f57c6c96aed8faa6901075fd643e7","modified":1530435522167},{"_id":"themes/hiker/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1530113725558},{"_id":"themes/hiker/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1530113725557},{"_id":"themes/hiker/layout/_partial/tencent-analytics.ejs","hash":"93120ad06c5d73ca777470faf570e993a805e049","modified":1530113725557},{"_id":"themes/hiker/layout/_widget/archive.ejs","hash":"9fffde4e794b35f07c96eaec6d9373a40014da8f","modified":1530113725558},{"_id":"themes/hiker/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1530113725558},{"_id":"themes/hiker/layout/_widget/curtains.ejs","hash":"630c11a237602b478df5215982face6681943f21","modified":1530113725558},{"_id":"themes/hiker/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1530113725558},{"_id":"themes/hiker/layout/_widget/social.ejs","hash":"2d26e8f8526b5e25dae037d494f3e0dd53b889a1","modified":1530392657219},{"_id":"themes/hiker/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1530113725558},{"_id":"themes/hiker/layout/search/index-mobile.ejs","hash":"50a727ac1dfe3073eb6fa6699ba01e66f4ac41c0","modified":1530113725559},{"_id":"themes/hiker/layout/search/baidu.ejs","hash":"3e603a702d20c53fd3bcbeb570a16a86d54781ce","modified":1530113725559},{"_id":"themes/hiker/layout/search/index.ejs","hash":"a027a663baaffa212f5eb4947d43008419376177","modified":1530113725560},{"_id":"themes/hiker/layout/search/insight.ejs","hash":"c820a8f2e19ebe20433a48b7b78abd721879e5ce","modified":1530436600254},{"_id":"themes/hiker/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1530113725560},{"_id":"themes/hiker/source/css/.DS_Store","hash":"b8e5951c497e1060bfccf7be197be3bad8cb1885","modified":1530551965807},{"_id":"themes/hiker/source/css/_extend.styl","hash":"5a2b18b03c18c92f130771aa97737e100202d21b","modified":1530113725560},{"_id":"themes/hiker/source/css/_variables.styl","hash":"5c4bb7b274a9b89929a93f8171ad4fc7079e70f6","modified":1530113725562},{"_id":"themes/hiker/source/css/archive.css","hash":"17cc72203cad1b0be66008d662c7494507aaee8b","modified":1530113725563},{"_id":"themes/hiker/source/css/dialog.css","hash":"5e0333adf3f496e0d443767fe228a1d4b1a2bafc","modified":1530113725563},{"_id":"themes/hiker/source/css/header-post.css","hash":"3f6d1f5593a353b4b05a67ee14e04ec9c986db21","modified":1530393209067},{"_id":"themes/hiker/source/css/home.css","hash":"7a4ee5811f3d80a75ee9508a91d6ca70e92ad6d9","modified":1530435016684},{"_id":"themes/hiker/source/css/style.styl","hash":"a85d047b09737a457998c0eab809964cc16e2da1","modified":1530437285628},{"_id":"themes/hiker/source/css/vdonate.css","hash":"bca2d291a71e7358654c51f23e8bfb467b2bc8b2","modified":1530113725578},{"_id":"themes/hiker/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1530113725578},{"_id":"themes/hiker/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1530113725579},{"_id":"themes/hiker/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1530113725579},{"_id":"themes/hiker/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1530113725579},{"_id":"themes/hiker/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1530113725579},{"_id":"themes/hiker/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1530113725579},{"_id":"themes/hiker/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1530113725581},{"_id":"themes/hiker/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1530113725581},{"_id":"themes/hiker/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1530113725581},{"_id":"themes/hiker/source/js/home.js","hash":"e403c3290d76c5f58571cbfe4414236e41a7ac94","modified":1530113725582},{"_id":"themes/hiker/source/js/insight.js","hash":"f79ab175d1c8c4fb59328ee4fd9eb95808eb0be5","modified":1530113725582},{"_id":"themes/hiker/source/js/dialog.js","hash":"01e8b337c1721e0486fd5044f98b233e84ba1985","modified":1530113725582},{"_id":"themes/hiker/source/js/totop.js","hash":"29bb40144ac238d22b25d59df465aff8dc38bfd0","modified":1530113725583},{"_id":"themes/hiker/source/js/scripts.js","hash":"e06a8948375df71cbf77abf8617db438ece811b3","modified":1530113725583},{"_id":"themes/hiker/source/preview/browser-support.png","hash":"a6d8498553550c6b18a8f22bcd2f53c993c7d677","modified":1530113725584},{"_id":"themes/hiker/source/js/vdonate.js","hash":"5738414c642d30e43943a69287b3d25a0b6be135","modified":1530113725583},{"_id":"themes/hiker/source/preview/donation-btn.png","hash":"ad78b1605b162e2399a1cdc5232f6a44298dba6c","modified":1530113725589},{"_id":"themes/hiker/source/preview/theme-color.png","hash":"725130ceea5e41bb2cc60b31e45275b4b0cc77b3","modified":1530113725598},{"_id":"themes/hiker/source/preview/preview-abstract.png","hash":"3d18ad9ba38fe24770ba6758d8f1bb242f669ce3","modified":1530113725590},{"_id":"themes/hiker/source/css/bootstrap.css","hash":"64fdc2e7c3f8a164d21c5632b5adbbb9990ea802","modified":1530113725563},{"_id":"themes/hiker/source/js/bootstrap.js","hash":"3b965a36a6b08854ad6eddedf85c5319fd392b4a","modified":1530113725582},{"_id":"themes/hiker/source/js/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1530113725583},{"_id":"source/photography/car/gallery/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1530551168352},{"_id":"source/photography/other/gallery/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1530551077559},{"_id":"source/photography/person/gallery/.DS_Store","hash":"14a8c67682d693105cdb6b79fff21f2e5f8679a6","modified":1530551283533},{"_id":"source/photography/scenery/gallery/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1530551320279},{"_id":"themes/hiker/.git/refs/heads/master","hash":"3b0c36ee90b0a3678a555131ace68c22809f4d78","modified":1530113725543},{"_id":"themes/hiker/layout/_partial/post/date.ejs","hash":"889c415a4d895b6e73e4b6acdb45c9844c917261","modified":1530390604129},{"_id":"themes/hiker/layout/_partial/post/gallery.ejs","hash":"30028f10a4f03561e53da323d06b292e1ae7990c","modified":1530113725557},{"_id":"themes/hiker/layout/_partial/post/category.ejs","hash":"e5bf4a27fca82322d37835479f1dd10fa36248dd","modified":1530391680788},{"_id":"themes/hiker/layout/_partial/post/mathjax.ejs","hash":"571c19f57c2b38ac5cd9b8f811cfad53b38616cf","modified":1530113725557},{"_id":"themes/hiker/layout/_partial/post/urlconvert.ejs","hash":"2133f1029632417f9043b9d4749d580ed0c75db0","modified":1530113725557},{"_id":"themes/hiker/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1530113725557},{"_id":"themes/hiker/layout/_partial/post/title.ejs","hash":"a61267f27f2148321e549344be91dbc4e22e1a48","modified":1530113725557},{"_id":"themes/hiker/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1530113725557},{"_id":"themes/hiker/layout/_partial/post/busuanzi-analytics.ejs","hash":"4ef5022062c8ee59f3413bc92e6b3ae0d5020738","modified":1530113725556},{"_id":"themes/hiker/source/css/_partial/archive.styl","hash":"28e78ec6e703417c50447c4710ad4bcf6cf48008","modified":1530113725561},{"_id":"themes/hiker/source/css/_partial/article.styl","hash":"159352219ea83533720867bc69d89a2bfd4af4a1","modified":1530113725561},{"_id":"themes/hiker/source/css/_partial/comment.styl","hash":"f23dbf9c1224559314f7d10b7fee030a9ffab58a","modified":1530113725561},{"_id":"themes/hiker/source/css/_partial/header-post.styl","hash":"e95431443eb28d45390de733068f87134e5780da","modified":1530113725561},{"_id":"themes/hiker/source/css/_partial/footer.styl","hash":"ce9f600140d5cd246b59374f615c8a512bc5ecab","modified":1530113725561},{"_id":"themes/hiker/source/css/_partial/header.styl","hash":"4bbc6be125b55de743ad00a5ddf751eba1f617c4","modified":1530113725561},{"_id":"themes/hiker/source/css/_partial/insight.styl","hash":"8cd23d8f0ce2d083dd7409a1a95315029070cbb8","modified":1530113725562},{"_id":"themes/hiker/source/css/_partial/mobile.styl","hash":"fcfbaf24634519063af46953e0eb733a8ada5556","modified":1530113725562},{"_id":"themes/hiker/source/css/_partial/sidebar-aside.styl","hash":"1b4caeb15892b2c34cc063065b9c408eb00216a6","modified":1530113725562},{"_id":"themes/hiker/source/css/_partial/highlight.styl","hash":"81d4b4431ad4ffff6937ac3b78f0effecd92b553","modified":1530113725561},{"_id":"themes/hiker/source/css/_partial/sidebar-bottom.styl","hash":"36886d5436bfafbf980539be8dbc419631b8b6ee","modified":1530113725562},{"_id":"themes/hiker/source/css/_partial/sidebar.styl","hash":"e93ca6bb5b709accd667b939980ad39582fe062b","modified":1530113725562},{"_id":"themes/hiker/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1530113725562},{"_id":"themes/hiker/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1530113725562},{"_id":"themes/hiker/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1530113725564},{"_id":"themes/hiker/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1530113725564},{"_id":"themes/hiker/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1530113725566},{"_id":"themes/hiker/source/css/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1530552570542},{"_id":"themes/hiker/source/css/images/avatar.jpg","hash":"d685c61842df6ff3f44a96ba4ac15117502168ee","modified":1530113725568},{"_id":"themes/hiker/source/css/images/homelogo.jpg","hash":"4bfc9650c4fd6e60b09ae29f888a819cdf88e9fe","modified":1530113725571},{"_id":"themes/hiker/source/css/images/mylogo.jpg","hash":"0acf39dd4cf9a892281f8372d02d04373aeee62c","modified":1530113725572},{"_id":"themes/hiker/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1530113725576},{"_id":"themes/hiker/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1530113725579},{"_id":"themes/hiker/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1530113725580},{"_id":"themes/hiker/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1530113725580},{"_id":"themes/hiker/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1530113725580},{"_id":"themes/hiker/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1530113725580},{"_id":"themes/hiker/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1530113725580},{"_id":"themes/hiker/.git/objects/pack/pack-993a23db2f5796b610d1bd1bbf860206f0eb14c9.idx","hash":"37996338e2c81a31c51afaa01bbe641a6c173ccd","modified":1530113725517},{"_id":"themes/hiker/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1530113725566},{"_id":"themes/hiker/.git/logs/refs/heads/master","hash":"fcca627c817792a90ea5e3a69f33d1619f89774d","modified":1530113725543},{"_id":"themes/hiker/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1530113725542},{"_id":"themes/hiker/source/css/images/sample.jpg","hash":"36b49a2f0183ac20207c44a8172e410e4d6865e6","modified":1530113725578},{"_id":"themes/hiker/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1530113725565},{"_id":"source/photography/other/gallery/electronic_products.jpg","hash":"1523ab42db810265986e85a9d5dcf501c64ff1ab","modified":1530553529341},{"_id":"source/photography/other/gallery/workbench_keyboard.jpg","hash":"16d33be6c041f536a18160718d17d336ae1ef8b3","modified":1530553529343},{"_id":"source/photography/person/gallery/chuyuancheng_cq.jpg","hash":"845db2b7948f1ff1ef3890282926783c0eda992e","modified":1530553529346},{"_id":"source/photography/person/gallery/cq_local_snack.jpg","hash":"93602d4d6301a7e546a37ecc7ae29c546b7837a9","modified":1530553529349},{"_id":"source/photography/person/gallery/hufeifei_cq.jpg","hash":"247c0a357f9727f2b70eb8955679ee97edd55b06","modified":1530553529355},{"_id":"source/photography/person/gallery/kangshanming_black_cq.jpg","hash":"c371cf27a5a8259b89a58898772803ffdc9af702","modified":1530553529357},{"_id":"source/photography/person/gallery/liulinjie_cq.jpg","hash":"7690788602347f7090f686b5f914ba672073e5ba","modified":1530553529362},{"_id":"source/photography/person/gallery/zhuqianli_cq.jpg","hash":"caef347304749fdf796dc49c53a70d9e3134d5f2","modified":1530553529418},{"_id":"source/photography/scenery/gallery/airplane_wing.jpg","hash":"b47d5bbbac52104ce6f9eed640a19c79ce66703b","modified":1530553529421},{"_id":"source/photography/scenery/gallery/cq_cacalu.jpg","hash":"2e08323e684f095b4dd6f5eb3076ee173def2761","modified":1530553529425},{"_id":"themes/hiker/.git/logs/refs/remotes/origin/HEAD","hash":"fcca627c817792a90ea5e3a69f33d1619f89774d","modified":1530113725542},{"_id":"themes/hiker/source/css/images/WechatIMG34.jpeg","hash":"6883898ae3a8ca48dfa4371f551252d13ccafdf7","modified":1530552066140},{"_id":"themes/hiker/source/css/images/IMG_4872.jpg","hash":"a5135e78e8f4e98bac199f699f88805b8a281ea0","modified":1530551505801},{"_id":"themes/hiker/source/css/images/WechatIMG28.jpeg","hash":"c2d9ad715f8539347e03fef5bf4e5e02f8e765f0","modified":1530551795741},{"_id":"themes/hiker/source/preview/preview-mobile.png","hash":"7679a50aef93fc364cbcee4a52cd84604bf741b1","modified":1530113725592},{"_id":"themes/hiker/source/css/images/IMG_4613.jpg","hash":"a67995a7694aab6f3e584bfd3f89c6bef73f1903","modified":1530551760515},{"_id":"themes/hiker/source/css/images/WechatIMG35.jpeg","hash":"2d5b444fc0eb177fe85a6a1e60c84c79edc5db76","modified":1530552278290},{"_id":"source/photography/car/gallery/car_dirty.jpg","hash":"2a67350405940d89052391a813f2656b7b5ec7ea","modified":1530553529331},{"_id":"source/photography/car/gallery/golf_cockpit.jpg","hash":"40adf219ad691d366bdeb659d1007cafab5535f4","modified":1530553529335},{"_id":"themes/hiker/source/css/images/WechatIMG39.jpeg","hash":"4714879fc70dc973e14bb48c8631f50b55233cdf","modified":1530552415347},{"_id":"themes/hiker/source/css/images/pose.jpg","hash":"4d394a662e7d6d2de6a4598688c7cd3dba5c2fa3","modified":1530113725576},{"_id":"source/photography/car/gallery/giant_bicycle.jpg","hash":"a1fef1b29afa03570546e42f88c6fefd62de6d26","modified":1530553529332},{"_id":"themes/hiker/source/css/images/IMG_4481.jpg","hash":"c02fce9ebed6f464648ddda949558bd92af77478","modified":1530461687345},{"_id":"themes/hiker/source/css/images/home-bg.jpg","hash":"e8dcdb6e03bd02d831bae593feccb7028c9dc5e9","modified":1530113725571},{"_id":"source/photography/person/gallery/kangshanming_cq_bridge.jpg","hash":"e3b4226f397393cb768ceebbac13e62f8662993e","modified":1530553529359},{"_id":"source/photography/scenery/gallery/hz_xixing_bridge.jpg","hash":"d54938b9a55dfb6dd1e11284caf1fa4e0ae62679","modified":1530553529427},{"_id":"themes/hiker/source/preview/code-theme.jpg","hash":"8c8512fd04e6106033656d10e92d51de76cca6d8","modified":1530113725589},{"_id":"source/photography/car/gallery/golf_steering_wheel.jpg","hash":"f4e6d039c480a09c727bb43a6606f69e3a542292","modified":1530553529337},{"_id":"source/photography/other/gallery/dolls.jpg","hash":"7505e693846923f180059b4ad6320b9729c0975d","modified":1530553529339},{"_id":"themes/hiker/source/css/images/WechatIMG32.jpeg","hash":"d6c1c57237acdb69afbe6e2e2345855145aba49f","modified":1530551848978},{"_id":"source/photography/scenery/gallery/hz_xs_gym.jpg","hash":"07b0476713b68033b5a82bc90db7aadd7035d520","modified":1530553529430},{"_id":"source/photography/scenery/gallery/yangtze_river_cableway.jpg","hash":"cacd95448e3e71933d4b57e204e1f7937af9311d","modified":1530553529433},{"_id":"source/photography/scenery/gallery/chongqing_bridge.jpg","hash":"a8ff706152a140ab0b2fffbb196cd80e4c59c671","modified":1530553529423},{"_id":"themes/hiker/source/preview/preview-pc.png","hash":"2471e0697938721e4c5d7c66940e165c59a31a0f","modified":1530113725598},{"_id":"source/photography/person/gallery/hf_WestLake.jpg","hash":"e1feddae02d34e2f6612535b376ed6dc3b54a758","modified":1530553529353},{"_id":"source/photography/person/gallery/self_jump.jpg","hash":"fb263c97bc0eb130f93a7de6de7649f6ac44bb2f","modified":1530553529416},{"_id":"themes/hiker/.git/objects/pack/pack-993a23db2f5796b610d1bd1bbf860206f0eb14c9.pack","hash":"2f90359f139d22d629a0b14b0cb2d89a785c5db3","modified":1530113725516},{"_id":"public/content.json","hash":"2e6af2518488a77dca7aaf22d58024d145defd6d","modified":1530553541336},{"_id":"public/categories/index.html","hash":"2fa337a6d0def4b2b3c45db156433cedf1e2018d","modified":1530553541474},{"_id":"public/photography/index.html","hash":"d2ed20c87663ad14637e446cc8b5241eb88d4df6","modified":1530553541474},{"_id":"public/tags/index.html","hash":"766549486c61c96604f9271524cbc21b36d81e89","modified":1530553541474},{"_id":"public/photography/car/index.html","hash":"4db16ba161dddc00807ac026cc5cec0b8b4ad86c","modified":1530553541475},{"_id":"public/photography/other/index.html","hash":"e9fdebe5b7edee30e0e06a65d318c09adc7be48f","modified":1530553541475},{"_id":"public/photography/person/index.html","hash":"0a82dbe9ff86b83fe41bc08056b744b61a40f34d","modified":1530553541475},{"_id":"public/photography/scenery/index.html","hash":"bf33c2d6205c5347831a30734acaa9807df83af4","modified":1530553541475},{"_id":"public/archives/index.html","hash":"a598132a37a04865f9efe799a571844d96780a3f","modified":1530553541475},{"_id":"public/archives/2018/index.html","hash":"8524790ce9a701c1554389316acf7f5965441c88","modified":1530553541475},{"_id":"public/archives/2018/07/index.html","hash":"4ac1fd2edb247b358bb46ef86f75e06ad6f3d2be","modified":1530553541475},{"_id":"public/categories/文档翻译/index.html","hash":"a3032fde81f7ee8b552a629eceed8e5a79e00e95","modified":1530553541475},{"_id":"public/tags/java/index.html","hash":"10c107230fa1d82e3b575006bfb34cfce83aad39","modified":1530553541475},{"_id":"public/tags/译文/index.html","hash":"a501f0fc143cc3816df2ed5bcac217b98a7c0810","modified":1530553541475},{"_id":"public/about/index.html","hash":"35fac8b470dc656ded0629cb446de9c5c260fb77","modified":1530553541475},{"_id":"public/2018/07/01/fork-join-framework/index.html","hash":"1c266a48d05f08426859ee1be0172c2cdade3255","modified":1530553541475},{"_id":"public/index.html","hash":"8522fafa72e515774914478d1e1fa5153b2a9d16","modified":1530553541475},{"_id":"public/avatar.jpg","hash":"163b3c9489c17d20a213142d1880982f1d8f7613","modified":1530553541484},{"_id":"public/images/alipay.jpg","hash":"cd6d05a94694f72b6853906f5e587c8acbf4fbb5","modified":1530553541484},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1530553541484},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1530553541484},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1530553541484},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1530553541484},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1530553541484},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1530553541485},{"_id":"public/preview/browser-support.png","hash":"a6d8498553550c6b18a8f22bcd2f53c993c7d677","modified":1530553541485},{"_id":"public/preview/donation-btn.png","hash":"ad78b1605b162e2399a1cdc5232f6a44298dba6c","modified":1530553541485},{"_id":"public/preview/theme-color.png","hash":"725130ceea5e41bb2cc60b31e45275b4b0cc77b3","modified":1530553541485},{"_id":"public/preview/preview-abstract.png","hash":"3d18ad9ba38fe24770ba6758d8f1bb242f669ce3","modified":1530553541485},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1530553541485},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1530553541485},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1530553541485},{"_id":"public/css/images/avatar.jpg","hash":"d685c61842df6ff3f44a96ba4ac15117502168ee","modified":1530553541485},{"_id":"public/css/images/homelogo.jpg","hash":"4bfc9650c4fd6e60b09ae29f888a819cdf88e9fe","modified":1530553541485},{"_id":"public/css/images/mylogo.jpg","hash":"0acf39dd4cf9a892281f8372d02d04373aeee62c","modified":1530553541485},{"_id":"public/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1530553541485},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1530553541485},{"_id":"public/images/wechat.jpg","hash":"1ed176c1ced09d58560507dde18623cfa57d00e6","modified":1530553542026},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1530553542027},{"_id":"public/css/archive.css","hash":"17cc72203cad1b0be66008d662c7494507aaee8b","modified":1530553542068},{"_id":"public/css/dialog.css","hash":"5e0333adf3f496e0d443767fe228a1d4b1a2bafc","modified":1530553542068},{"_id":"public/css/home.css","hash":"7a4ee5811f3d80a75ee9508a91d6ca70e92ad6d9","modified":1530553542069},{"_id":"public/css/header-post.css","hash":"3f6d1f5593a353b4b05a67ee14e04ec9c986db21","modified":1530553542069},{"_id":"public/css/vdonate.css","hash":"bca2d291a71e7358654c51f23e8bfb467b2bc8b2","modified":1530553542069},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1530553542069},{"_id":"public/js/insight.js","hash":"f79ab175d1c8c4fb59328ee4fd9eb95808eb0be5","modified":1530553542069},{"_id":"public/js/home.js","hash":"e403c3290d76c5f58571cbfe4414236e41a7ac94","modified":1530553542069},{"_id":"public/js/totop.js","hash":"29bb40144ac238d22b25d59df465aff8dc38bfd0","modified":1530553542069},{"_id":"public/js/dialog.js","hash":"01e8b337c1721e0486fd5044f98b233e84ba1985","modified":1530553542069},{"_id":"public/js/scripts.js","hash":"e06a8948375df71cbf77abf8617db438ece811b3","modified":1530553542069},{"_id":"public/js/vdonate.js","hash":"5738414c642d30e43943a69287b3d25a0b6be135","modified":1530553542069},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1530553542069},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1530553542069},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1530553542069},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1530553542069},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1530553542069},{"_id":"public/css/style.css","hash":"327ed1a2cb94057d65a326c7b3bfc6bd49241477","modified":1530553542069},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1530553542070},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1530553542071},{"_id":"public/css/bootstrap.css","hash":"64fdc2e7c3f8a164d21c5632b5adbbb9990ea802","modified":1530553542071},{"_id":"public/js/bootstrap.js","hash":"3b965a36a6b08854ad6eddedf85c5319fd392b4a","modified":1530553542071},{"_id":"public/js/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1530553542071},{"_id":"public/css/images/sample.jpg","hash":"36b49a2f0183ac20207c44a8172e410e4d6865e6","modified":1530553542071},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1530553542079},{"_id":"public/photography/other/gallery/electronic_products.jpg","hash":"1523ab42db810265986e85a9d5dcf501c64ff1ab","modified":1530553542086},{"_id":"public/photography/other/gallery/workbench_keyboard.jpg","hash":"16d33be6c041f536a18160718d17d336ae1ef8b3","modified":1530553542086},{"_id":"public/photography/person/gallery/chuyuancheng_cq.jpg","hash":"845db2b7948f1ff1ef3890282926783c0eda992e","modified":1530553542086},{"_id":"public/photography/person/gallery/cq_local_snack.jpg","hash":"93602d4d6301a7e546a37ecc7ae29c546b7837a9","modified":1530553542086},{"_id":"public/photography/person/gallery/hufeifei_cq.jpg","hash":"247c0a357f9727f2b70eb8955679ee97edd55b06","modified":1530553542086},{"_id":"public/photography/person/gallery/kangshanming_black_cq.jpg","hash":"c371cf27a5a8259b89a58898772803ffdc9af702","modified":1530553542087},{"_id":"public/photography/person/gallery/liulinjie_cq.jpg","hash":"7690788602347f7090f686b5f914ba672073e5ba","modified":1530553542087},{"_id":"public/photography/person/gallery/zhuqianli_cq.jpg","hash":"caef347304749fdf796dc49c53a70d9e3134d5f2","modified":1530553542087},{"_id":"public/photography/scenery/gallery/airplane_wing.jpg","hash":"b47d5bbbac52104ce6f9eed640a19c79ce66703b","modified":1530553542088},{"_id":"public/photography/scenery/gallery/cq_cacalu.jpg","hash":"2e08323e684f095b4dd6f5eb3076ee173def2761","modified":1530553542088},{"_id":"public/css/images/WechatIMG34.jpeg","hash":"6883898ae3a8ca48dfa4371f551252d13ccafdf7","modified":1530553542089},{"_id":"public/css/images/IMG_4872.jpg","hash":"a5135e78e8f4e98bac199f699f88805b8a281ea0","modified":1530553542089},{"_id":"public/css/images/WechatIMG28.jpeg","hash":"c2d9ad715f8539347e03fef5bf4e5e02f8e765f0","modified":1530553542089},{"_id":"public/css/images/IMG_4613.jpg","hash":"a67995a7694aab6f3e584bfd3f89c6bef73f1903","modified":1530553542096},{"_id":"public/css/images/WechatIMG35.jpeg","hash":"2d5b444fc0eb177fe85a6a1e60c84c79edc5db76","modified":1530553542096},{"_id":"public/preview/preview-mobile.png","hash":"7679a50aef93fc364cbcee4a52cd84604bf741b1","modified":1530553542102},{"_id":"public/photography/car/gallery/car_dirty.jpg","hash":"2a67350405940d89052391a813f2656b7b5ec7ea","modified":1530553542102},{"_id":"public/photography/car/gallery/golf_cockpit.jpg","hash":"40adf219ad691d366bdeb659d1007cafab5535f4","modified":1530553542102},{"_id":"public/css/images/WechatIMG39.jpeg","hash":"4714879fc70dc973e14bb48c8631f50b55233cdf","modified":1530553542103},{"_id":"public/css/images/pose.jpg","hash":"4d394a662e7d6d2de6a4598688c7cd3dba5c2fa3","modified":1530553542103},{"_id":"public/photography/car/gallery/giant_bicycle.jpg","hash":"a1fef1b29afa03570546e42f88c6fefd62de6d26","modified":1530553542111},{"_id":"public/css/images/IMG_4481.jpg","hash":"c02fce9ebed6f464648ddda949558bd92af77478","modified":1530553542111},{"_id":"public/css/images/home-bg.jpg","hash":"e8dcdb6e03bd02d831bae593feccb7028c9dc5e9","modified":1530553542112},{"_id":"public/photography/person/gallery/kangshanming_cq_bridge.jpg","hash":"e3b4226f397393cb768ceebbac13e62f8662993e","modified":1530553542117},{"_id":"public/photography/scenery/gallery/hz_xixing_bridge.jpg","hash":"d54938b9a55dfb6dd1e11284caf1fa4e0ae62679","modified":1530553542117},{"_id":"public/photography/car/gallery/golf_steering_wheel.jpg","hash":"f4e6d039c480a09c727bb43a6606f69e3a542292","modified":1530553542120},{"_id":"public/photography/other/gallery/dolls.jpg","hash":"7505e693846923f180059b4ad6320b9729c0975d","modified":1530553542120},{"_id":"public/css/images/WechatIMG32.jpeg","hash":"d6c1c57237acdb69afbe6e2e2345855145aba49f","modified":1530553542121},{"_id":"public/preview/code-theme.jpg","hash":"8c8512fd04e6106033656d10e92d51de76cca6d8","modified":1530553542124},{"_id":"public/photography/scenery/gallery/hz_xs_gym.jpg","hash":"07b0476713b68033b5a82bc90db7aadd7035d520","modified":1530553542129},{"_id":"public/photography/scenery/gallery/yangtze_river_cableway.jpg","hash":"cacd95448e3e71933d4b57e204e1f7937af9311d","modified":1530553542129},{"_id":"public/photography/scenery/gallery/chongqing_bridge.jpg","hash":"a8ff706152a140ab0b2fffbb196cd80e4c59c671","modified":1530553542132},{"_id":"public/preview/preview-pc.png","hash":"2471e0697938721e4c5d7c66940e165c59a31a0f","modified":1530553542134},{"_id":"public/photography/person/gallery/hf_WestLake.jpg","hash":"e1feddae02d34e2f6612535b376ed6dc3b54a758","modified":1530553542143},{"_id":"public/photography/person/gallery/self_jump.jpg","hash":"fb263c97bc0eb130f93a7de6de7649f6ac44bb2f","modified":1530553542169}],"Category":[{"name":"文档翻译","_id":"cjj4k26dk0003v0hct2msz3vq"}],"Data":[],"Page":[{"title":"关于我","comments":0,"_content":"\n** 有心的人，会在平淡琐碎的时光中根植梦想，抓紧时光充实自己，创造机会。最终，他们就会在别人感慨平庸生活的时候，收获成功。 ** \n","source":"about/index.md","raw":"---\ntitle: 关于我\ncomments: false\n---\n\n** 有心的人，会在平淡琐碎的时光中根植梦想，抓紧时光充实自己，创造机会。最终，他们就会在别人感慨平庸生活的时候，收获成功。 ** \n","date":"2018-07-02T17:45:29.329Z","updated":"2018-07-02T17:45:29.329Z","path":"about/index.html","layout":"page","_id":"cjj4k26dg0001v0hcul8ruyaz","content":"<p><strong> 有心的人，会在平淡琐碎的时光中根植梦想，抓紧时光充实自己，创造机会。最终，他们就会在别人感慨平庸生活的时候，收获成功。 </strong> </p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong> 有心的人，会在平淡琐碎的时光中根植梦想，抓紧时光充实自己，创造机会。最终，他们就会在别人感慨平庸生活的时候，收获成功。 </strong> </p>\n"},{"title":"目录","date":"2018-06-30T18:41:42.000Z","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 目录\ndate: 2018-07-01 02:41:42\nlayout: \"categories\"\n---\n","updated":"2018-07-02T17:45:29.329Z","path":"categories/index.html","comments":1,"_id":"cjj4k26di0002v0hcmltwqbsn","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"摄影精选集","comments":0,"_content":"\n* ### [人](person)\n* ### [景](scenery)\n* ### [车](car)\n* ### [杂](other)","source":"photography/index.md","raw":"---\ntitle: 摄影精选集\ncomments: false\n---\n\n* ### [人](person)\n* ### [景](scenery)\n* ### [车](car)\n* ### [杂](other)","date":"2018-07-02T17:45:29.337Z","updated":"2018-07-02T17:45:29.337Z","path":"photography/index.html","layout":"page","_id":"cjj4k26dm0005v0hcb8dzyoh7","content":"<ul>\n<li><h3 id=\"人\"><a href=\"#人\" class=\"headerlink\" title=\"人\"></a><a href=\"person\">人</a></h3></li>\n<li><h3 id=\"景\"><a href=\"#景\" class=\"headerlink\" title=\"景\"></a><a href=\"scenery\">景</a></h3></li>\n<li><h3 id=\"车\"><a href=\"#车\" class=\"headerlink\" title=\"车\"></a><a href=\"car\">车</a></h3></li>\n<li><h3 id=\"杂\"><a href=\"#杂\" class=\"headerlink\" title=\"杂\"></a><a href=\"other\">杂</a></h3></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h3 id=\"人\"><a href=\"#人\" class=\"headerlink\" title=\"人\"></a><a href=\"person\">人</a></h3></li>\n<li><h3 id=\"景\"><a href=\"#景\" class=\"headerlink\" title=\"景\"></a><a href=\"scenery\">景</a></h3></li>\n<li><h3 id=\"车\"><a href=\"#车\" class=\"headerlink\" title=\"车\"></a><a href=\"car\">车</a></h3></li>\n<li><h3 id=\"杂\"><a href=\"#杂\" class=\"headerlink\" title=\"杂\"></a><a href=\"other\">杂</a></h3></li>\n</ul>\n"},{"title":"标签页","date":"2018-06-30T18:39:53.000Z","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签页\ndate: 2018-07-01 02:39:53\nlayout: \"tags\"\n---\n","updated":"2018-07-02T17:45:29.434Z","path":"tags/index.html","comments":1,"_id":"cjj4k26do0006v0hca4x3bz3w","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"车","comments":0,"date":"2018-07-01T13:12:36.000Z","_content":"\n![](gallery/giant_bicycle.jpg)\n![](gallery/car_dirty.jpg)\n![](gallery/golf_cockpit.jpg)\n![](gallery/golf_steering_wheel.jpg)","source":"photography/car/index.md","raw":"---\ntitle: 车\ncomments: false\ndate: 2018-07-01 21:12:36\n---\n\n![](gallery/giant_bicycle.jpg)\n![](gallery/car_dirty.jpg)\n![](gallery/golf_cockpit.jpg)\n![](gallery/golf_steering_wheel.jpg)","updated":"2018-07-02T17:45:29.337Z","path":"photography/car/index.html","layout":"page","_id":"cjj4k26f2000bv0hcjbpeqmbq","content":"<p><img src=\"gallery/giant_bicycle.jpg\" alt=\"\"><br><img src=\"gallery/car_dirty.jpg\" alt=\"\"><br><img src=\"gallery/golf_cockpit.jpg\" alt=\"\"><br><img src=\"gallery/golf_steering_wheel.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"gallery/giant_bicycle.jpg\" alt=\"\"><br><img src=\"gallery/car_dirty.jpg\" alt=\"\"><br><img src=\"gallery/golf_cockpit.jpg\" alt=\"\"><br><img src=\"gallery/golf_steering_wheel.jpg\" alt=\"\"></p>\n"},{"title":"杂","comments":0,"date":"2018-07-01T13:44:38.000Z","_content":"\n![](gallery/dolls.jpg)\n![](gallery/electronic_products.jpg)\n![](gallery/workbench_keyboard.jpg)\n","source":"photography/other/index.md","raw":"---\ntitle: 杂\ncomments: false\ndate: 2018-07-01 21:44:38\n---\n\n![](gallery/dolls.jpg)\n![](gallery/electronic_products.jpg)\n![](gallery/workbench_keyboard.jpg)\n","updated":"2018-07-02T17:45:29.343Z","path":"photography/other/index.html","layout":"page","_id":"cjj4k26f3000cv0hc661ik0s2","content":"<p><img src=\"gallery/dolls.jpg\" alt=\"\"><br><img src=\"gallery/electronic_products.jpg\" alt=\"\"><br><img src=\"gallery/workbench_keyboard.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"gallery/dolls.jpg\" alt=\"\"><br><img src=\"gallery/electronic_products.jpg\" alt=\"\"><br><img src=\"gallery/workbench_keyboard.jpg\" alt=\"\"></p>\n"},{"title":"人文","comments":0,"type":"page","_content":"\n![](gallery/kangshanming_cq_bridge.jpg)\n![](gallery/kangshanming_black_cq.jpg)\n![](gallery/chuyuancheng_cq.jpg)\n![](gallery/cq_local_snack.jpg)\n![](gallery/hufeifei_cq.jpg)\n![](gallery/liulinjie_cq.jpg)\n![](gallery/zhuqianli_cq.jpg)\n","source":"photography/person/index.md","raw":"---\ntitle: 人文\ncomments: false\ntype: page\n---\n\n![](gallery/kangshanming_cq_bridge.jpg)\n![](gallery/kangshanming_black_cq.jpg)\n![](gallery/chuyuancheng_cq.jpg)\n![](gallery/cq_local_snack.jpg)\n![](gallery/hufeifei_cq.jpg)\n![](gallery/liulinjie_cq.jpg)\n![](gallery/zhuqianli_cq.jpg)\n","date":"2018-07-02T17:45:29.418Z","updated":"2018-07-02T17:45:29.418Z","path":"photography/person/index.html","layout":"page","_id":"cjj4k26f3000dv0hc7a9fmv5t","content":"<p><img src=\"gallery/kangshanming_cq_bridge.jpg\" alt=\"\"><br><img src=\"gallery/kangshanming_black_cq.jpg\" alt=\"\"><br><img src=\"gallery/chuyuancheng_cq.jpg\" alt=\"\"><br><img src=\"gallery/cq_local_snack.jpg\" alt=\"\"><br><img src=\"gallery/hufeifei_cq.jpg\" alt=\"\"><br><img src=\"gallery/liulinjie_cq.jpg\" alt=\"\"><br><img src=\"gallery/zhuqianli_cq.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"gallery/kangshanming_cq_bridge.jpg\" alt=\"\"><br><img src=\"gallery/kangshanming_black_cq.jpg\" alt=\"\"><br><img src=\"gallery/chuyuancheng_cq.jpg\" alt=\"\"><br><img src=\"gallery/cq_local_snack.jpg\" alt=\"\"><br><img src=\"gallery/hufeifei_cq.jpg\" alt=\"\"><br><img src=\"gallery/liulinjie_cq.jpg\" alt=\"\"><br><img src=\"gallery/zhuqianli_cq.jpg\" alt=\"\"></p>\n"},{"title":"景","comments":0,"type":"post","_content":"\n\n![](gallery/chongqing_bridge.jpg)\n![](gallery/airplane_wing.jpg)\n![](gallery/cq_cacalu.jpg)\n![](gallery/hz_xixing_bridge.jpg)\n![](gallery/hz_xs_gym.jpg)\n![](gallery/yangtze_river_cableway.jpg)\n","source":"photography/scenery/index.md","raw":"---\ntitle: 景\ncomments: false\ntype: post\n---\n\n\n![](gallery/chongqing_bridge.jpg)\n![](gallery/airplane_wing.jpg)\n![](gallery/cq_cacalu.jpg)\n![](gallery/hz_xixing_bridge.jpg)\n![](gallery/hz_xs_gym.jpg)\n![](gallery/yangtze_river_cableway.jpg)\n","date":"2018-07-02T17:45:29.433Z","updated":"2018-07-02T17:45:29.433Z","path":"photography/scenery/index.html","layout":"page","_id":"cjj4k26f4000ev0hc3fr743pp","content":"<p><img src=\"gallery/chongqing_bridge.jpg\" alt=\"\"><br><img src=\"gallery/airplane_wing.jpg\" alt=\"\"><br><img src=\"gallery/cq_cacalu.jpg\" alt=\"\"><br><img src=\"gallery/hz_xixing_bridge.jpg\" alt=\"\"><br><img src=\"gallery/hz_xs_gym.jpg\" alt=\"\"><br><img src=\"gallery/yangtze_river_cableway.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"gallery/chongqing_bridge.jpg\" alt=\"\"><br><img src=\"gallery/airplane_wing.jpg\" alt=\"\"><br><img src=\"gallery/cq_cacalu.jpg\" alt=\"\"><br><img src=\"gallery/hz_xixing_bridge.jpg\" alt=\"\"><br><img src=\"gallery/hz_xs_gym.jpg\" alt=\"\"><br><img src=\"gallery/yangtze_river_cableway.jpg\" alt=\"\"></p>\n"}],"Post":[{"title":"A Java Fork/Join Framework(译文)","comments":0,"date":"2018-07-01T04:06:19.000Z","_content":"\n<center>translate by jin.shengjie</center> \n\n# 摘要\n　　本篇论文介绍对支持并行程序Java框架的设计，具体实现和性能效率，所谓的并行程序就是将问题（递归）分解成多个并行解决的子任务，等待这些子任务的完成并组合最终的结果。这种通用设计是为Cilk编程语言设计的工作窃取框架的一种变种。 其中主要的实现技巧是围绕着有效的构建和管理任务队列和工作线程。 性能结果表明好的并行方式能够让多数程序加速执行，同时也表明程序有可能有改进的空间。\n\n# 简介\n　　对于获取好的并行性能而言，Fork/Join并行方式是介于最简单和最有效率设计技巧中间的。Fork/Join的各种算法是常见分而治之算法（divide−and−conquer algorithms）的并行版本。常见的一种形式如下： \n```\nResult solve(Problem problem) {\n if (problem is small){\n \tdirectly solve problem\n    } else {\n \t\t\tsplit problem into independent parts\n \t\t\tfork new subtasks to solve each part;\n \t\t\tjoin all subtasks;\n \t\t\tcompose result from subresults;\n \t\t\t}\n}\n```\n　　fork操作启动一个新的并行fork/join子任务,join操作将会等到所有forked子任务都完成后才会继续当前任务。就像其他分而治之算法一样，Fork/Join算法多数情况下都需用到递归，即不停的将任务分解为小任务，直到任务小到可以用简单的，短小有序的方法来解决。一些关联的编程技巧和例子在《Java并发编程》第二版4.4章节有做讨论。本论文主要讨论ForkJoinTask的设计，实现和性能，ForkJoinTask是支持这种编程方式的Java框架。\n\n# 设计\n　　Fork/join程序可以运行在任何一个支持构建子任务，这些子任务能够被并行执行，同时具有等待子任务返回任务结果机制的框架之上。然而`java.lang.Thread`这个类是支持fork/join程序的次优载体： \n* Fork/join 的任务具有简单正常的同步机制和管理需求。相比于通用目的的线程而言，fork/join任务的计算能力具备更高效率的执行策略。比如：fork/join任务除了等待子任务结束之外不需要被阻塞，因此，通用目的线程用来追踪线程的成本就会被浪费掉了。\n* 在某些给定任务粒度的情况下，创建和管理线程的成本就会大于任务做计算本身的时间成本。然而，当程序运行在特定的平台上时，这些粒度要做相应的调整，以便任务粒度大到可以覆盖掉线程开销来利用并行性。  \n\n　　简而言之，标准的线程框架用来支持多数的fork/join程序还是太重了。但是同时因为线程是许多其他并发和并行程序的基石，所以仅仅为了支持这种fork/join方式而去移除线程开销和调优线程调度是不可能的（至少是不切实际的）。\n实际上这种想法已经有很长的一段历史了，第一个提供这些问题的系统解决方案的框架是Cilk编程语言。Cilk和其他轻量级可执行框架将具有特定目的的fork/join 程序构建在操作系统的基本线程或进程机制之上。同样的机制也被运用到了Java语言当中，虽然在java中的线程正好反过来具有更底层操作系统能力。创建这种java轻量级执行框架的主要优势是能够用一种更便捷的写法来使用fork/join程序，同时能够运行在多数能够支持JVM的系统之上。\nForkJoinTask框架是基于在Cilk编程语言被使用的设计的一种变种。其他变种能够在Hood,Filamengs,stackthreads，以及那些构建于轻量级可执行任务的系统中看到。所有这些构建都是将任务映射成线程，就像操作系统以同样的方式将线程映射成CPU一样，但是fork/join程序在执行这种映射的时候能够充分利用简单性，规律性以及约束。所有的这些框架都已不同的写法来实现并行程序，且他们都为fork/join的设计而作了相应的优化：\n* 一个工作线程的线程池会被建立。每一个工作线程（在这里就是一个继承于ForkJoinTaskRuuner线程的实例）都是一个标准（“重”）的线程，这些线程用来处理队列中的任务。正常来说，工作线程的数量和系统中CPU的数量是一样的。再像Cilk这种native框架当中，他们会将工作线程映射成内核线程或轻量级进程，然后在映射到CPU。 在java中，JVM和操作系统必须将这些工作线程映射成CPU。然而，这对于操作系统而言是一份简单的任务，因为这些线程都是计算密集型的。任何一个合理的映射策略都会将这些线程映射到不同的CPU上。\n* 所有fork/join任务都是轻量级可执行类的实例，并不是线程的实例。在java中，独立可执行的任务必须要实现Runnable接口和定义一个run方法。在ForkJoinTask框架下，这些任务都是ForkJoinTask的子类而不是Thread的子类。\n* 一个特定目的的队列和调度规则被用来管理任务和通过工作线程来执行他们。这些机制通过那些任务类中提供的几个方法来触发，主要的方法有： `fork`, `join`, `isDone`(一个完成状态指示器)， 还有一些便利性的方法，比如`coInvoke`方法用来`fork`然后同时`join`两个或者更多的任务。\n* 一个简单的控制和管理设施。用来建立工作池以及在一个正常的线程（比如java中的main方法）中启动一个给定的fork/join任务的执行。\n作为对于程序员来说一个fork/join框架是怎么展现的标砖样例，这里有一个计算斐波那契数列（Fibonacci）的方法： \n\n```\n    class Fib extends FJTask {\n        static final int threshold = 13;\n        volatile int number; // arg/result\n\n        Fib(int n) { number = n; }\n\n        int getAnswer() {\n            if (!isDone())\n                throw new IllegalStateException();\n            return number;\n        }\n\n        public void run() {\n            int n = number;\n            if (n <= threshold) // granularity ctl\n                number = seqFib(n);\n            else {\n                Fib f1 = new Fib(n − 1);\n                Fib f2 = new Fib(n − 2);\n                coInvoke(f1, f2);\n                number = f1.number + f2.number;\n            }\n        }\n\n        public static void main(String[] args) {\n            try {\n                int groupSize = 2; // for example\n                FJTaskRunnerGroup group =\n                        new FJTaskRunnerGroup(groupSize);\n                Fib f = new Fib(35); // for example\n                group.invoke(f);\n                int result = f.getAnswer();\n                System.out.println(\"Answer: \" +\n                        result);\n            } catch (InterruptedException ex) {}\n        }\n\n        int seqFib(int n) {\n            if (n <= 1)\n                return n;\n            else\n                return seqFib(n−1) + seqFib(n−2);\n        }\n    }\n``` \n　　这个版本的代码在第四章节描述的平台上相对于每个任务都新起一个`java.lang.Thread`来说在效率上至少要快上30倍。这样的代码同时还维护了多线程java程序本质上的可移植性。对于程序员来说只要两个参数需要去调整：\n1. 构建工作线程的数量，一般来说都是和平台可用的CPU数量是一致的。（或者更少：其他的CPU用来处理其他不相关的任务，又或者在极少数情况下需要多于CPU数量的工作线程：用来抵消非计算密集型任务留下的间隙）\n2. 一个粒度参数。 这个参数用来代表创建任务的成本将高于潜在的并行性所带来的优势。这个参数实际上是具有算法相关性而不是平台相关性。通常来说可能都是设置一个在单核处理器上能够获得很好效果的阈值，但是在多可CPU上，该值还是需要不断的去探查才能得到。作为一个副效应，这个方式可以很好的和JVM的动态编译想配合，JVM动态编译指的是会优化小的方法会优于单块程序。也就是说，利用数据本地化的有点，能够是fork/join算法优于其他的算法，即便是在单核处理器上。\n\n## 工作偷窃\n　fork/join框架的核心在于他的轻量级调度机制。 FJTask采用了一种由Cilk语言最先开创的工作偷窃调度机制的基本策略。\n* 每个工作线程在它自己的调度队列里面维护一个可运行的任务\n* 队列是作为双端队列来维护的，同时支持LIFO（后进先出）和FIFO（先进先出）操作\n* 在给定的工作线程中由任务生成的子任务都会被放进工作线程自己的双端队列当中\n* 工作线程通过LIFO的方式来处理他们自己的双端队列，也就是通过pop的形式取出最后放进去的任务\n* 当一个工作线程自己的双端队列当中没有任务可以执行的时候，它就会尝试随机地从其他工作线程的任务队列中通过FIFO的方式来获取任务，这种方式也可以称作为偷任务\n* 当一个工作线程遇到了`join`操作，？？？\n* 当一个工作线程没有自己的任务可做并且 从其他线程队列当中偷窃任务失败的时候，它将会暂时停歇然后继续尝试做任务直到左右的线程都是相同的空闲状态。在这种情况下所有的线程都会被阻塞直到其他线程从顶级层级被激活。？？？\n\n　　就像在其他文档当中描述的那样，每个工作线程通过LIFO的规则从自己的工作队列当中过去任务，然而去偷窃任务的时候用的是FIFO的规则，这是一种对广泛使用递归方式的fork/join的优化设计。不正式而言，这种设计提供了两种基本的优势：\n>1. 作为双端队列的拥有者，偷窃者通过在反方向的操作将会减少拥有者和偷窃者在获取任务时候的冲突。同时这样也利用到了递归分而治之算法会导致先产生大任务的特点。因此，通过偷窃线程，最先被偷窃到的任务是有可能被分担到更多的工作的，也会导致进一步递归的分解\n>2.作为这些规则的结果，相对于那些粗粒度的或者没有利用递归分解任务的程序而言，那些具有相对小任务粒度的程序会有运行更快的趋势。即使在多数的fork/join程序当中有相对少的任务会被偷窃，创建细粒度任务意味着当工作线程更有获取到它的可能性。\n\n# 实现\n　　这个框架用了大约800行存java代码来实现，主要都在FJTaskRunner这个类当中，它是`java.lang.Thread`的子类。 `FJTasks`本身仅仅包含了完成状态及时通过委托他们当前工作线程来执行其他操作。`FJTaskRunnerGroup`类用来构建工作线程，维护一些共享状态以及帮组协调启动和关闭。\n更过的实现文档在`util.concurrent`包中可以获得。本节内容仅仅讨论实现这个框架过程中遇到的问题和解决方案，问题包含： 支持有效的双端队列操作（`push`,`pop`,`take`）； 管理线程获取新任务的偷窃协议。\n## 双端队列\n　　为了有效和可扩展性执行任务，任务管理必须被设计的尽可能的快。创建，推送以及后来的获取（不常发生的偷窃）任务和顺序执行程序的过程调用一样都是需要开销的。更少的开销能够让程序员采取更小的任务粒度，更小的任务粒度反过来又能获得好的并行性。\n任务分配本身是JVM的责任。 java垃圾收集器允许我们创建一个特殊目的的内存分配器来维护任务。 如此一来，相比通过其他语言来实现`FJTasks`，通过java语言来实现将会大幅减少复杂度和代码量。\n双端队列的基本结构是通过单数组来构建的普通结构，每个双端队列有两个索引； `top` 索引的行为就像一个基于数组栈指示器，做`push`和`pop`操作的时候会改变该值。 `base`索引只有`take`操作的时候才会改变。由于`FJTaskRunner`里面的操作都是和双端队列里面的细节紧密相关的（比如，`fork`就是简单的调用`push`操作），所以双端队列这个数据机构就嵌套在这个类当中，而不是独立一个组件。\n　　由于双端队列这个数组会同时被多个线程访问，有时候还不能完全具有同步机制，又由于一个独立的JAVA数组元素不能被申明成`volatile`，所以每个数组元素实际上一个固定的引用，这个引用对象维护着一个`volatile`引用。 当初做出这个决定主要是为了兼容JAVA内存规则，但是这种间接的引用最后被证明在测试平台上能够提高性能，推测起来大概是由于访问附近元素减少了缓存竞争，而这种附近元素的分布由于间接引用的关系在内存变得更加均匀。\n　　实现双端队列的主要困难围绕了同步机制和同步机制的终止。即使在已经优化过同步机制设施的JVM上，为每个`push`和`pop`操作获取锁都会成为一个瓶颈。 然而，在Cilk语言中采用策略的改版提供了一个解决办法，这个解决办法基于以下几个准则：\n\n> * `push`和`pop`操作只能有拥有者线程来触发\n> * 通过在`take`操作上加上进入锁，很容易在同一时刻限制只有偷窃线程来执行`take`操作。（必要时，双端队列的锁也能禁用`take`操作） 因此，冲突控制的问题就缩小为两个部分的同步机制问题了\n> * 只有在双端队列即将要变空的情况下，`pop`和`take`操作才会有冲突。其他情况下，都能保证这两个操作是在相互独立的元素上进行操作的\n\n　　如果双端队列里面确保多于一个元素的话，将`pop`和`base`这两个索引定义为`volatile`变量能够保证`pop`和`take`这两个操作不需要加锁。这是通过一种类似于戴克斯特拉算法来做到的，在这种算法当中， `push`会提前递减`top`变量：`if (--top >= base) ...`以及`take`会提前增加`base`变量：`if(++base < top) ...`\n在这两个情况下，必须要在随后比较这两个索引来判断操作是否会导致双端队列为空。一个部队称的规则被用来处理潜在的冲突： `pop`操作会再检查状态并且在获得了双端队列锁之后继续操作（这把锁也是`take`操作需要持有的锁）, 只有在双端队列真的为空的情况下，`pop`操作才会回退。相反， `take`操作会立即回退，通常来说他们会去尝试从其他的队列中去偷窃任务。这种不对称也是和Cilk语言中的协议差别最大的一点。？？？\n　　除非双端队列将要溢出，否则`volatile`变量索引的使用使得在做`push`操作的时候也不需要同步机制。如果双端队列真的将要溢出，`push`操作必须要获取到双端队列锁来进行扩容数组。否则，简单的确保只有在双端队列数组在`take`操作的时候被填满时才去更新。\n　　\n\n\n","source":"_posts/fork-join-framework.md","raw":"---\ntitle: A Java Fork/Join Framework(译文)\ncomments: false\ndate: 2018-07-01 12:06:19\ntags: \n- java\n- 译文\ncategories:\n- 文档翻译\n---\n\n<center>translate by jin.shengjie</center> \n\n# 摘要\n　　本篇论文介绍对支持并行程序Java框架的设计，具体实现和性能效率，所谓的并行程序就是将问题（递归）分解成多个并行解决的子任务，等待这些子任务的完成并组合最终的结果。这种通用设计是为Cilk编程语言设计的工作窃取框架的一种变种。 其中主要的实现技巧是围绕着有效的构建和管理任务队列和工作线程。 性能结果表明好的并行方式能够让多数程序加速执行，同时也表明程序有可能有改进的空间。\n\n# 简介\n　　对于获取好的并行性能而言，Fork/Join并行方式是介于最简单和最有效率设计技巧中间的。Fork/Join的各种算法是常见分而治之算法（divide−and−conquer algorithms）的并行版本。常见的一种形式如下： \n```\nResult solve(Problem problem) {\n if (problem is small){\n \tdirectly solve problem\n    } else {\n \t\t\tsplit problem into independent parts\n \t\t\tfork new subtasks to solve each part;\n \t\t\tjoin all subtasks;\n \t\t\tcompose result from subresults;\n \t\t\t}\n}\n```\n　　fork操作启动一个新的并行fork/join子任务,join操作将会等到所有forked子任务都完成后才会继续当前任务。就像其他分而治之算法一样，Fork/Join算法多数情况下都需用到递归，即不停的将任务分解为小任务，直到任务小到可以用简单的，短小有序的方法来解决。一些关联的编程技巧和例子在《Java并发编程》第二版4.4章节有做讨论。本论文主要讨论ForkJoinTask的设计，实现和性能，ForkJoinTask是支持这种编程方式的Java框架。\n\n# 设计\n　　Fork/join程序可以运行在任何一个支持构建子任务，这些子任务能够被并行执行，同时具有等待子任务返回任务结果机制的框架之上。然而`java.lang.Thread`这个类是支持fork/join程序的次优载体： \n* Fork/join 的任务具有简单正常的同步机制和管理需求。相比于通用目的的线程而言，fork/join任务的计算能力具备更高效率的执行策略。比如：fork/join任务除了等待子任务结束之外不需要被阻塞，因此，通用目的线程用来追踪线程的成本就会被浪费掉了。\n* 在某些给定任务粒度的情况下，创建和管理线程的成本就会大于任务做计算本身的时间成本。然而，当程序运行在特定的平台上时，这些粒度要做相应的调整，以便任务粒度大到可以覆盖掉线程开销来利用并行性。  \n\n　　简而言之，标准的线程框架用来支持多数的fork/join程序还是太重了。但是同时因为线程是许多其他并发和并行程序的基石，所以仅仅为了支持这种fork/join方式而去移除线程开销和调优线程调度是不可能的（至少是不切实际的）。\n实际上这种想法已经有很长的一段历史了，第一个提供这些问题的系统解决方案的框架是Cilk编程语言。Cilk和其他轻量级可执行框架将具有特定目的的fork/join 程序构建在操作系统的基本线程或进程机制之上。同样的机制也被运用到了Java语言当中，虽然在java中的线程正好反过来具有更底层操作系统能力。创建这种java轻量级执行框架的主要优势是能够用一种更便捷的写法来使用fork/join程序，同时能够运行在多数能够支持JVM的系统之上。\nForkJoinTask框架是基于在Cilk编程语言被使用的设计的一种变种。其他变种能够在Hood,Filamengs,stackthreads，以及那些构建于轻量级可执行任务的系统中看到。所有这些构建都是将任务映射成线程，就像操作系统以同样的方式将线程映射成CPU一样，但是fork/join程序在执行这种映射的时候能够充分利用简单性，规律性以及约束。所有的这些框架都已不同的写法来实现并行程序，且他们都为fork/join的设计而作了相应的优化：\n* 一个工作线程的线程池会被建立。每一个工作线程（在这里就是一个继承于ForkJoinTaskRuuner线程的实例）都是一个标准（“重”）的线程，这些线程用来处理队列中的任务。正常来说，工作线程的数量和系统中CPU的数量是一样的。再像Cilk这种native框架当中，他们会将工作线程映射成内核线程或轻量级进程，然后在映射到CPU。 在java中，JVM和操作系统必须将这些工作线程映射成CPU。然而，这对于操作系统而言是一份简单的任务，因为这些线程都是计算密集型的。任何一个合理的映射策略都会将这些线程映射到不同的CPU上。\n* 所有fork/join任务都是轻量级可执行类的实例，并不是线程的实例。在java中，独立可执行的任务必须要实现Runnable接口和定义一个run方法。在ForkJoinTask框架下，这些任务都是ForkJoinTask的子类而不是Thread的子类。\n* 一个特定目的的队列和调度规则被用来管理任务和通过工作线程来执行他们。这些机制通过那些任务类中提供的几个方法来触发，主要的方法有： `fork`, `join`, `isDone`(一个完成状态指示器)， 还有一些便利性的方法，比如`coInvoke`方法用来`fork`然后同时`join`两个或者更多的任务。\n* 一个简单的控制和管理设施。用来建立工作池以及在一个正常的线程（比如java中的main方法）中启动一个给定的fork/join任务的执行。\n作为对于程序员来说一个fork/join框架是怎么展现的标砖样例，这里有一个计算斐波那契数列（Fibonacci）的方法： \n\n```\n    class Fib extends FJTask {\n        static final int threshold = 13;\n        volatile int number; // arg/result\n\n        Fib(int n) { number = n; }\n\n        int getAnswer() {\n            if (!isDone())\n                throw new IllegalStateException();\n            return number;\n        }\n\n        public void run() {\n            int n = number;\n            if (n <= threshold) // granularity ctl\n                number = seqFib(n);\n            else {\n                Fib f1 = new Fib(n − 1);\n                Fib f2 = new Fib(n − 2);\n                coInvoke(f1, f2);\n                number = f1.number + f2.number;\n            }\n        }\n\n        public static void main(String[] args) {\n            try {\n                int groupSize = 2; // for example\n                FJTaskRunnerGroup group =\n                        new FJTaskRunnerGroup(groupSize);\n                Fib f = new Fib(35); // for example\n                group.invoke(f);\n                int result = f.getAnswer();\n                System.out.println(\"Answer: \" +\n                        result);\n            } catch (InterruptedException ex) {}\n        }\n\n        int seqFib(int n) {\n            if (n <= 1)\n                return n;\n            else\n                return seqFib(n−1) + seqFib(n−2);\n        }\n    }\n``` \n　　这个版本的代码在第四章节描述的平台上相对于每个任务都新起一个`java.lang.Thread`来说在效率上至少要快上30倍。这样的代码同时还维护了多线程java程序本质上的可移植性。对于程序员来说只要两个参数需要去调整：\n1. 构建工作线程的数量，一般来说都是和平台可用的CPU数量是一致的。（或者更少：其他的CPU用来处理其他不相关的任务，又或者在极少数情况下需要多于CPU数量的工作线程：用来抵消非计算密集型任务留下的间隙）\n2. 一个粒度参数。 这个参数用来代表创建任务的成本将高于潜在的并行性所带来的优势。这个参数实际上是具有算法相关性而不是平台相关性。通常来说可能都是设置一个在单核处理器上能够获得很好效果的阈值，但是在多可CPU上，该值还是需要不断的去探查才能得到。作为一个副效应，这个方式可以很好的和JVM的动态编译想配合，JVM动态编译指的是会优化小的方法会优于单块程序。也就是说，利用数据本地化的有点，能够是fork/join算法优于其他的算法，即便是在单核处理器上。\n\n## 工作偷窃\n　fork/join框架的核心在于他的轻量级调度机制。 FJTask采用了一种由Cilk语言最先开创的工作偷窃调度机制的基本策略。\n* 每个工作线程在它自己的调度队列里面维护一个可运行的任务\n* 队列是作为双端队列来维护的，同时支持LIFO（后进先出）和FIFO（先进先出）操作\n* 在给定的工作线程中由任务生成的子任务都会被放进工作线程自己的双端队列当中\n* 工作线程通过LIFO的方式来处理他们自己的双端队列，也就是通过pop的形式取出最后放进去的任务\n* 当一个工作线程自己的双端队列当中没有任务可以执行的时候，它就会尝试随机地从其他工作线程的任务队列中通过FIFO的方式来获取任务，这种方式也可以称作为偷任务\n* 当一个工作线程遇到了`join`操作，？？？\n* 当一个工作线程没有自己的任务可做并且 从其他线程队列当中偷窃任务失败的时候，它将会暂时停歇然后继续尝试做任务直到左右的线程都是相同的空闲状态。在这种情况下所有的线程都会被阻塞直到其他线程从顶级层级被激活。？？？\n\n　　就像在其他文档当中描述的那样，每个工作线程通过LIFO的规则从自己的工作队列当中过去任务，然而去偷窃任务的时候用的是FIFO的规则，这是一种对广泛使用递归方式的fork/join的优化设计。不正式而言，这种设计提供了两种基本的优势：\n>1. 作为双端队列的拥有者，偷窃者通过在反方向的操作将会减少拥有者和偷窃者在获取任务时候的冲突。同时这样也利用到了递归分而治之算法会导致先产生大任务的特点。因此，通过偷窃线程，最先被偷窃到的任务是有可能被分担到更多的工作的，也会导致进一步递归的分解\n>2.作为这些规则的结果，相对于那些粗粒度的或者没有利用递归分解任务的程序而言，那些具有相对小任务粒度的程序会有运行更快的趋势。即使在多数的fork/join程序当中有相对少的任务会被偷窃，创建细粒度任务意味着当工作线程更有获取到它的可能性。\n\n# 实现\n　　这个框架用了大约800行存java代码来实现，主要都在FJTaskRunner这个类当中，它是`java.lang.Thread`的子类。 `FJTasks`本身仅仅包含了完成状态及时通过委托他们当前工作线程来执行其他操作。`FJTaskRunnerGroup`类用来构建工作线程，维护一些共享状态以及帮组协调启动和关闭。\n更过的实现文档在`util.concurrent`包中可以获得。本节内容仅仅讨论实现这个框架过程中遇到的问题和解决方案，问题包含： 支持有效的双端队列操作（`push`,`pop`,`take`）； 管理线程获取新任务的偷窃协议。\n## 双端队列\n　　为了有效和可扩展性执行任务，任务管理必须被设计的尽可能的快。创建，推送以及后来的获取（不常发生的偷窃）任务和顺序执行程序的过程调用一样都是需要开销的。更少的开销能够让程序员采取更小的任务粒度，更小的任务粒度反过来又能获得好的并行性。\n任务分配本身是JVM的责任。 java垃圾收集器允许我们创建一个特殊目的的内存分配器来维护任务。 如此一来，相比通过其他语言来实现`FJTasks`，通过java语言来实现将会大幅减少复杂度和代码量。\n双端队列的基本结构是通过单数组来构建的普通结构，每个双端队列有两个索引； `top` 索引的行为就像一个基于数组栈指示器，做`push`和`pop`操作的时候会改变该值。 `base`索引只有`take`操作的时候才会改变。由于`FJTaskRunner`里面的操作都是和双端队列里面的细节紧密相关的（比如，`fork`就是简单的调用`push`操作），所以双端队列这个数据机构就嵌套在这个类当中，而不是独立一个组件。\n　　由于双端队列这个数组会同时被多个线程访问，有时候还不能完全具有同步机制，又由于一个独立的JAVA数组元素不能被申明成`volatile`，所以每个数组元素实际上一个固定的引用，这个引用对象维护着一个`volatile`引用。 当初做出这个决定主要是为了兼容JAVA内存规则，但是这种间接的引用最后被证明在测试平台上能够提高性能，推测起来大概是由于访问附近元素减少了缓存竞争，而这种附近元素的分布由于间接引用的关系在内存变得更加均匀。\n　　实现双端队列的主要困难围绕了同步机制和同步机制的终止。即使在已经优化过同步机制设施的JVM上，为每个`push`和`pop`操作获取锁都会成为一个瓶颈。 然而，在Cilk语言中采用策略的改版提供了一个解决办法，这个解决办法基于以下几个准则：\n\n> * `push`和`pop`操作只能有拥有者线程来触发\n> * 通过在`take`操作上加上进入锁，很容易在同一时刻限制只有偷窃线程来执行`take`操作。（必要时，双端队列的锁也能禁用`take`操作） 因此，冲突控制的问题就缩小为两个部分的同步机制问题了\n> * 只有在双端队列即将要变空的情况下，`pop`和`take`操作才会有冲突。其他情况下，都能保证这两个操作是在相互独立的元素上进行操作的\n\n　　如果双端队列里面确保多于一个元素的话，将`pop`和`base`这两个索引定义为`volatile`变量能够保证`pop`和`take`这两个操作不需要加锁。这是通过一种类似于戴克斯特拉算法来做到的，在这种算法当中， `push`会提前递减`top`变量：`if (--top >= base) ...`以及`take`会提前增加`base`变量：`if(++base < top) ...`\n在这两个情况下，必须要在随后比较这两个索引来判断操作是否会导致双端队列为空。一个部队称的规则被用来处理潜在的冲突： `pop`操作会再检查状态并且在获得了双端队列锁之后继续操作（这把锁也是`take`操作需要持有的锁）, 只有在双端队列真的为空的情况下，`pop`操作才会回退。相反， `take`操作会立即回退，通常来说他们会去尝试从其他的队列中去偷窃任务。这种不对称也是和Cilk语言中的协议差别最大的一点。？？？\n　　除非双端队列将要溢出，否则`volatile`变量索引的使用使得在做`push`操作的时候也不需要同步机制。如果双端队列真的将要溢出，`push`操作必须要获取到双端队列锁来进行扩容数组。否则，简单的确保只有在双端队列数组在`take`操作的时候被填满时才去更新。\n　　\n\n\n","slug":"fork-join-framework","published":1,"updated":"2018-07-03T18:09:37.685Z","_id":"cjj4k26db0000v0hcv2ogmiyc","layout":"post","photos":[],"link":"","content":"<center>translate by jin.shengjie</center> \n\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>　　本篇论文介绍对支持并行程序Java框架的设计，具体实现和性能效率，所谓的并行程序就是将问题（递归）分解成多个并行解决的子任务，等待这些子任务的完成并组合最终的结果。这种通用设计是为Cilk编程语言设计的工作窃取框架的一种变种。 其中主要的实现技巧是围绕着有效的构建和管理任务队列和工作线程。 性能结果表明好的并行方式能够让多数程序加速执行，同时也表明程序有可能有改进的空间。</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>　　对于获取好的并行性能而言，Fork/Join并行方式是介于最简单和最有效率设计技巧中间的。Fork/Join的各种算法是常见分而治之算法（divide−and−conquer algorithms）的并行版本。常见的一种形式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Result solve(Problem problem) &#123;</span><br><span class=\"line\"> if (problem is small)&#123;</span><br><span class=\"line\"> \tdirectly solve problem</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\"> \t\t\tsplit problem into independent parts</span><br><span class=\"line\"> \t\t\tfork new subtasks to solve each part;</span><br><span class=\"line\"> \t\t\tjoin all subtasks;</span><br><span class=\"line\"> \t\t\tcompose result from subresults;</span><br><span class=\"line\"> \t\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　fork操作启动一个新的并行fork/join子任务,join操作将会等到所有forked子任务都完成后才会继续当前任务。就像其他分而治之算法一样，Fork/Join算法多数情况下都需用到递归，即不停的将任务分解为小任务，直到任务小到可以用简单的，短小有序的方法来解决。一些关联的编程技巧和例子在《Java并发编程》第二版4.4章节有做讨论。本论文主要讨论ForkJoinTask的设计，实现和性能，ForkJoinTask是支持这种编程方式的Java框架。</p>\n<h1 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h1><p>　　Fork/join程序可以运行在任何一个支持构建子任务，这些子任务能够被并行执行，同时具有等待子任务返回任务结果机制的框架之上。然而<code>java.lang.Thread</code>这个类是支持fork/join程序的次优载体： </p>\n<ul>\n<li>Fork/join 的任务具有简单正常的同步机制和管理需求。相比于通用目的的线程而言，fork/join任务的计算能力具备更高效率的执行策略。比如：fork/join任务除了等待子任务结束之外不需要被阻塞，因此，通用目的线程用来追踪线程的成本就会被浪费掉了。</li>\n<li>在某些给定任务粒度的情况下，创建和管理线程的成本就会大于任务做计算本身的时间成本。然而，当程序运行在特定的平台上时，这些粒度要做相应的调整，以便任务粒度大到可以覆盖掉线程开销来利用并行性。  </li>\n</ul>\n<p>　　简而言之，标准的线程框架用来支持多数的fork/join程序还是太重了。但是同时因为线程是许多其他并发和并行程序的基石，所以仅仅为了支持这种fork/join方式而去移除线程开销和调优线程调度是不可能的（至少是不切实际的）。<br>实际上这种想法已经有很长的一段历史了，第一个提供这些问题的系统解决方案的框架是Cilk编程语言。Cilk和其他轻量级可执行框架将具有特定目的的fork/join 程序构建在操作系统的基本线程或进程机制之上。同样的机制也被运用到了Java语言当中，虽然在java中的线程正好反过来具有更底层操作系统能力。创建这种java轻量级执行框架的主要优势是能够用一种更便捷的写法来使用fork/join程序，同时能够运行在多数能够支持JVM的系统之上。<br>ForkJoinTask框架是基于在Cilk编程语言被使用的设计的一种变种。其他变种能够在Hood,Filamengs,stackthreads，以及那些构建于轻量级可执行任务的系统中看到。所有这些构建都是将任务映射成线程，就像操作系统以同样的方式将线程映射成CPU一样，但是fork/join程序在执行这种映射的时候能够充分利用简单性，规律性以及约束。所有的这些框架都已不同的写法来实现并行程序，且他们都为fork/join的设计而作了相应的优化：</p>\n<ul>\n<li>一个工作线程的线程池会被建立。每一个工作线程（在这里就是一个继承于ForkJoinTaskRuuner线程的实例）都是一个标准（“重”）的线程，这些线程用来处理队列中的任务。正常来说，工作线程的数量和系统中CPU的数量是一样的。再像Cilk这种native框架当中，他们会将工作线程映射成内核线程或轻量级进程，然后在映射到CPU。 在java中，JVM和操作系统必须将这些工作线程映射成CPU。然而，这对于操作系统而言是一份简单的任务，因为这些线程都是计算密集型的。任何一个合理的映射策略都会将这些线程映射到不同的CPU上。</li>\n<li>所有fork/join任务都是轻量级可执行类的实例，并不是线程的实例。在java中，独立可执行的任务必须要实现Runnable接口和定义一个run方法。在ForkJoinTask框架下，这些任务都是ForkJoinTask的子类而不是Thread的子类。</li>\n<li>一个特定目的的队列和调度规则被用来管理任务和通过工作线程来执行他们。这些机制通过那些任务类中提供的几个方法来触发，主要的方法有： <code>fork</code>, <code>join</code>, <code>isDone</code>(一个完成状态指示器)， 还有一些便利性的方法，比如<code>coInvoke</code>方法用来<code>fork</code>然后同时<code>join</code>两个或者更多的任务。</li>\n<li>一个简单的控制和管理设施。用来建立工作池以及在一个正常的线程（比如java中的main方法）中启动一个给定的fork/join任务的执行。<br>作为对于程序员来说一个fork/join框架是怎么展现的标砖样例，这里有一个计算斐波那契数列（Fibonacci）的方法： </li>\n</ul>\n<pre><code>class Fib extends FJTask {\n    static final int threshold = 13;\n    volatile int number; // arg/result\n\n    Fib(int n) { number = n; }\n\n    int getAnswer() {\n        if (!isDone())\n            throw new IllegalStateException();\n        return number;\n    }\n\n    public void run() {\n        int n = number;\n        if (n &lt;= threshold) // granularity ctl\n            number = seqFib(n);\n        else {\n            Fib f1 = new Fib(n − 1);\n            Fib f2 = new Fib(n − 2);\n            coInvoke(f1, f2);\n            number = f1.number + f2.number;\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            int groupSize = 2; // for example\n            FJTaskRunnerGroup group =\n                    new FJTaskRunnerGroup(groupSize);\n            Fib f = new Fib(35); // for example\n            group.invoke(f);\n            int result = f.getAnswer();\n            System.out.println(&quot;Answer: &quot; +\n                    result);\n        } catch (InterruptedException ex) {}\n    }\n\n    int seqFib(int n) {\n        if (n &lt;= 1)\n            return n;\n        else\n            return seqFib(n−1) + seqFib(n−2);\n    }\n}\n</code></pre><p>　　这个版本的代码在第四章节描述的平台上相对于每个任务都新起一个<code>java.lang.Thread</code>来说在效率上至少要快上30倍。这样的代码同时还维护了多线程java程序本质上的可移植性。对于程序员来说只要两个参数需要去调整：</p>\n<ol>\n<li>构建工作线程的数量，一般来说都是和平台可用的CPU数量是一致的。（或者更少：其他的CPU用来处理其他不相关的任务，又或者在极少数情况下需要多于CPU数量的工作线程：用来抵消非计算密集型任务留下的间隙）</li>\n<li>一个粒度参数。 这个参数用来代表创建任务的成本将高于潜在的并行性所带来的优势。这个参数实际上是具有算法相关性而不是平台相关性。通常来说可能都是设置一个在单核处理器上能够获得很好效果的阈值，但是在多可CPU上，该值还是需要不断的去探查才能得到。作为一个副效应，这个方式可以很好的和JVM的动态编译想配合，JVM动态编译指的是会优化小的方法会优于单块程序。也就是说，利用数据本地化的有点，能够是fork/join算法优于其他的算法，即便是在单核处理器上。</li>\n</ol>\n<h2 id=\"工作偷窃\"><a href=\"#工作偷窃\" class=\"headerlink\" title=\"工作偷窃\"></a>工作偷窃</h2><p>　fork/join框架的核心在于他的轻量级调度机制。 FJTask采用了一种由Cilk语言最先开创的工作偷窃调度机制的基本策略。</p>\n<ul>\n<li>每个工作线程在它自己的调度队列里面维护一个可运行的任务</li>\n<li>队列是作为双端队列来维护的，同时支持LIFO（后进先出）和FIFO（先进先出）操作</li>\n<li>在给定的工作线程中由任务生成的子任务都会被放进工作线程自己的双端队列当中</li>\n<li>工作线程通过LIFO的方式来处理他们自己的双端队列，也就是通过pop的形式取出最后放进去的任务</li>\n<li>当一个工作线程自己的双端队列当中没有任务可以执行的时候，它就会尝试随机地从其他工作线程的任务队列中通过FIFO的方式来获取任务，这种方式也可以称作为偷任务</li>\n<li>当一个工作线程遇到了<code>join</code>操作，？？？</li>\n<li>当一个工作线程没有自己的任务可做并且 从其他线程队列当中偷窃任务失败的时候，它将会暂时停歇然后继续尝试做任务直到左右的线程都是相同的空闲状态。在这种情况下所有的线程都会被阻塞直到其他线程从顶级层级被激活。？？？</li>\n</ul>\n<p>　　就像在其他文档当中描述的那样，每个工作线程通过LIFO的规则从自己的工作队列当中过去任务，然而去偷窃任务的时候用的是FIFO的规则，这是一种对广泛使用递归方式的fork/join的优化设计。不正式而言，这种设计提供了两种基本的优势：</p>\n<blockquote>\n<ol>\n<li>作为双端队列的拥有者，偷窃者通过在反方向的操作将会减少拥有者和偷窃者在获取任务时候的冲突。同时这样也利用到了递归分而治之算法会导致先产生大任务的特点。因此，通过偷窃线程，最先被偷窃到的任务是有可能被分担到更多的工作的，也会导致进一步递归的分解<br>2.作为这些规则的结果，相对于那些粗粒度的或者没有利用递归分解任务的程序而言，那些具有相对小任务粒度的程序会有运行更快的趋势。即使在多数的fork/join程序当中有相对少的任务会被偷窃，创建细粒度任务意味着当工作线程更有获取到它的可能性。</li>\n</ol>\n</blockquote>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><p>　　这个框架用了大约800行存java代码来实现，主要都在FJTaskRunner这个类当中，它是<code>java.lang.Thread</code>的子类。 <code>FJTasks</code>本身仅仅包含了完成状态及时通过委托他们当前工作线程来执行其他操作。<code>FJTaskRunnerGroup</code>类用来构建工作线程，维护一些共享状态以及帮组协调启动和关闭。<br>更过的实现文档在<code>util.concurrent</code>包中可以获得。本节内容仅仅讨论实现这个框架过程中遇到的问题和解决方案，问题包含： 支持有效的双端队列操作（<code>push</code>,<code>pop</code>,<code>take</code>）； 管理线程获取新任务的偷窃协议。</p>\n<h2 id=\"双端队列\"><a href=\"#双端队列\" class=\"headerlink\" title=\"双端队列\"></a>双端队列</h2><p>　　为了有效和可扩展性执行任务，任务管理必须被设计的尽可能的快。创建，推送以及后来的获取（不常发生的偷窃）任务和顺序执行程序的过程调用一样都是需要开销的。更少的开销能够让程序员采取更小的任务粒度，更小的任务粒度反过来又能获得好的并行性。<br>任务分配本身是JVM的责任。 java垃圾收集器允许我们创建一个特殊目的的内存分配器来维护任务。 如此一来，相比通过其他语言来实现<code>FJTasks</code>，通过java语言来实现将会大幅减少复杂度和代码量。<br>双端队列的基本结构是通过单数组来构建的普通结构，每个双端队列有两个索引； <code>top</code> 索引的行为就像一个基于数组栈指示器，做<code>push</code>和<code>pop</code>操作的时候会改变该值。 <code>base</code>索引只有<code>take</code>操作的时候才会改变。由于<code>FJTaskRunner</code>里面的操作都是和双端队列里面的细节紧密相关的（比如，<code>fork</code>就是简单的调用<code>push</code>操作），所以双端队列这个数据机构就嵌套在这个类当中，而不是独立一个组件。<br>　　由于双端队列这个数组会同时被多个线程访问，有时候还不能完全具有同步机制，又由于一个独立的JAVA数组元素不能被申明成<code>volatile</code>，所以每个数组元素实际上一个固定的引用，这个引用对象维护着一个<code>volatile</code>引用。 当初做出这个决定主要是为了兼容JAVA内存规则，但是这种间接的引用最后被证明在测试平台上能够提高性能，推测起来大概是由于访问附近元素减少了缓存竞争，而这种附近元素的分布由于间接引用的关系在内存变得更加均匀。<br>　　实现双端队列的主要困难围绕了同步机制和同步机制的终止。即使在已经优化过同步机制设施的JVM上，为每个<code>push</code>和<code>pop</code>操作获取锁都会成为一个瓶颈。 然而，在Cilk语言中采用策略的改版提供了一个解决办法，这个解决办法基于以下几个准则：</p>\n<blockquote>\n<ul>\n<li><code>push</code>和<code>pop</code>操作只能有拥有者线程来触发</li>\n<li>通过在<code>take</code>操作上加上进入锁，很容易在同一时刻限制只有偷窃线程来执行<code>take</code>操作。（必要时，双端队列的锁也能禁用<code>take</code>操作） 因此，冲突控制的问题就缩小为两个部分的同步机制问题了</li>\n<li>只有在双端队列即将要变空的情况下，<code>pop</code>和<code>take</code>操作才会有冲突。其他情况下，都能保证这两个操作是在相互独立的元素上进行操作的</li>\n</ul>\n</blockquote>\n<p>　　如果双端队列里面确保多于一个元素的话，将<code>pop</code>和<code>base</code>这两个索引定义为<code>volatile</code>变量能够保证<code>pop</code>和<code>take</code>这两个操作不需要加锁。这是通过一种类似于戴克斯特拉算法来做到的，在这种算法当中， <code>push</code>会提前递减<code>top</code>变量：<code>if (--top &gt;= base) ...</code>以及<code>take</code>会提前增加<code>base</code>变量：<code>if(++base &lt; top) ...</code><br>在这两个情况下，必须要在随后比较这两个索引来判断操作是否会导致双端队列为空。一个部队称的规则被用来处理潜在的冲突： <code>pop</code>操作会再检查状态并且在获得了双端队列锁之后继续操作（这把锁也是<code>take</code>操作需要持有的锁）, 只有在双端队列真的为空的情况下，<code>pop</code>操作才会回退。相反， <code>take</code>操作会立即回退，通常来说他们会去尝试从其他的队列中去偷窃任务。这种不对称也是和Cilk语言中的协议差别最大的一点。？？？<br>　　除非双端队列将要溢出，否则<code>volatile</code>变量索引的使用使得在做<code>push</code>操作的时候也不需要同步机制。如果双端队列真的将要溢出，<code>push</code>操作必须要获取到双端队列锁来进行扩容数组。否则，简单的确保只有在双端队列数组在<code>take</code>操作的时候被填满时才去更新。\n　　</p>\n","site":{"data":{}},"excerpt":"","more":"<center>translate by jin.shengjie</center> \n\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>　　本篇论文介绍对支持并行程序Java框架的设计，具体实现和性能效率，所谓的并行程序就是将问题（递归）分解成多个并行解决的子任务，等待这些子任务的完成并组合最终的结果。这种通用设计是为Cilk编程语言设计的工作窃取框架的一种变种。 其中主要的实现技巧是围绕着有效的构建和管理任务队列和工作线程。 性能结果表明好的并行方式能够让多数程序加速执行，同时也表明程序有可能有改进的空间。</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>　　对于获取好的并行性能而言，Fork/Join并行方式是介于最简单和最有效率设计技巧中间的。Fork/Join的各种算法是常见分而治之算法（divide−and−conquer algorithms）的并行版本。常见的一种形式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Result solve(Problem problem) &#123;</span><br><span class=\"line\"> if (problem is small)&#123;</span><br><span class=\"line\"> \tdirectly solve problem</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\"> \t\t\tsplit problem into independent parts</span><br><span class=\"line\"> \t\t\tfork new subtasks to solve each part;</span><br><span class=\"line\"> \t\t\tjoin all subtasks;</span><br><span class=\"line\"> \t\t\tcompose result from subresults;</span><br><span class=\"line\"> \t\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　fork操作启动一个新的并行fork/join子任务,join操作将会等到所有forked子任务都完成后才会继续当前任务。就像其他分而治之算法一样，Fork/Join算法多数情况下都需用到递归，即不停的将任务分解为小任务，直到任务小到可以用简单的，短小有序的方法来解决。一些关联的编程技巧和例子在《Java并发编程》第二版4.4章节有做讨论。本论文主要讨论ForkJoinTask的设计，实现和性能，ForkJoinTask是支持这种编程方式的Java框架。</p>\n<h1 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h1><p>　　Fork/join程序可以运行在任何一个支持构建子任务，这些子任务能够被并行执行，同时具有等待子任务返回任务结果机制的框架之上。然而<code>java.lang.Thread</code>这个类是支持fork/join程序的次优载体： </p>\n<ul>\n<li>Fork/join 的任务具有简单正常的同步机制和管理需求。相比于通用目的的线程而言，fork/join任务的计算能力具备更高效率的执行策略。比如：fork/join任务除了等待子任务结束之外不需要被阻塞，因此，通用目的线程用来追踪线程的成本就会被浪费掉了。</li>\n<li>在某些给定任务粒度的情况下，创建和管理线程的成本就会大于任务做计算本身的时间成本。然而，当程序运行在特定的平台上时，这些粒度要做相应的调整，以便任务粒度大到可以覆盖掉线程开销来利用并行性。  </li>\n</ul>\n<p>　　简而言之，标准的线程框架用来支持多数的fork/join程序还是太重了。但是同时因为线程是许多其他并发和并行程序的基石，所以仅仅为了支持这种fork/join方式而去移除线程开销和调优线程调度是不可能的（至少是不切实际的）。<br>实际上这种想法已经有很长的一段历史了，第一个提供这些问题的系统解决方案的框架是Cilk编程语言。Cilk和其他轻量级可执行框架将具有特定目的的fork/join 程序构建在操作系统的基本线程或进程机制之上。同样的机制也被运用到了Java语言当中，虽然在java中的线程正好反过来具有更底层操作系统能力。创建这种java轻量级执行框架的主要优势是能够用一种更便捷的写法来使用fork/join程序，同时能够运行在多数能够支持JVM的系统之上。<br>ForkJoinTask框架是基于在Cilk编程语言被使用的设计的一种变种。其他变种能够在Hood,Filamengs,stackthreads，以及那些构建于轻量级可执行任务的系统中看到。所有这些构建都是将任务映射成线程，就像操作系统以同样的方式将线程映射成CPU一样，但是fork/join程序在执行这种映射的时候能够充分利用简单性，规律性以及约束。所有的这些框架都已不同的写法来实现并行程序，且他们都为fork/join的设计而作了相应的优化：</p>\n<ul>\n<li>一个工作线程的线程池会被建立。每一个工作线程（在这里就是一个继承于ForkJoinTaskRuuner线程的实例）都是一个标准（“重”）的线程，这些线程用来处理队列中的任务。正常来说，工作线程的数量和系统中CPU的数量是一样的。再像Cilk这种native框架当中，他们会将工作线程映射成内核线程或轻量级进程，然后在映射到CPU。 在java中，JVM和操作系统必须将这些工作线程映射成CPU。然而，这对于操作系统而言是一份简单的任务，因为这些线程都是计算密集型的。任何一个合理的映射策略都会将这些线程映射到不同的CPU上。</li>\n<li>所有fork/join任务都是轻量级可执行类的实例，并不是线程的实例。在java中，独立可执行的任务必须要实现Runnable接口和定义一个run方法。在ForkJoinTask框架下，这些任务都是ForkJoinTask的子类而不是Thread的子类。</li>\n<li>一个特定目的的队列和调度规则被用来管理任务和通过工作线程来执行他们。这些机制通过那些任务类中提供的几个方法来触发，主要的方法有： <code>fork</code>, <code>join</code>, <code>isDone</code>(一个完成状态指示器)， 还有一些便利性的方法，比如<code>coInvoke</code>方法用来<code>fork</code>然后同时<code>join</code>两个或者更多的任务。</li>\n<li>一个简单的控制和管理设施。用来建立工作池以及在一个正常的线程（比如java中的main方法）中启动一个给定的fork/join任务的执行。<br>作为对于程序员来说一个fork/join框架是怎么展现的标砖样例，这里有一个计算斐波那契数列（Fibonacci）的方法： </li>\n</ul>\n<pre><code>class Fib extends FJTask {\n    static final int threshold = 13;\n    volatile int number; // arg/result\n\n    Fib(int n) { number = n; }\n\n    int getAnswer() {\n        if (!isDone())\n            throw new IllegalStateException();\n        return number;\n    }\n\n    public void run() {\n        int n = number;\n        if (n &lt;= threshold) // granularity ctl\n            number = seqFib(n);\n        else {\n            Fib f1 = new Fib(n − 1);\n            Fib f2 = new Fib(n − 2);\n            coInvoke(f1, f2);\n            number = f1.number + f2.number;\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            int groupSize = 2; // for example\n            FJTaskRunnerGroup group =\n                    new FJTaskRunnerGroup(groupSize);\n            Fib f = new Fib(35); // for example\n            group.invoke(f);\n            int result = f.getAnswer();\n            System.out.println(&quot;Answer: &quot; +\n                    result);\n        } catch (InterruptedException ex) {}\n    }\n\n    int seqFib(int n) {\n        if (n &lt;= 1)\n            return n;\n        else\n            return seqFib(n−1) + seqFib(n−2);\n    }\n}\n</code></pre><p>　　这个版本的代码在第四章节描述的平台上相对于每个任务都新起一个<code>java.lang.Thread</code>来说在效率上至少要快上30倍。这样的代码同时还维护了多线程java程序本质上的可移植性。对于程序员来说只要两个参数需要去调整：</p>\n<ol>\n<li>构建工作线程的数量，一般来说都是和平台可用的CPU数量是一致的。（或者更少：其他的CPU用来处理其他不相关的任务，又或者在极少数情况下需要多于CPU数量的工作线程：用来抵消非计算密集型任务留下的间隙）</li>\n<li>一个粒度参数。 这个参数用来代表创建任务的成本将高于潜在的并行性所带来的优势。这个参数实际上是具有算法相关性而不是平台相关性。通常来说可能都是设置一个在单核处理器上能够获得很好效果的阈值，但是在多可CPU上，该值还是需要不断的去探查才能得到。作为一个副效应，这个方式可以很好的和JVM的动态编译想配合，JVM动态编译指的是会优化小的方法会优于单块程序。也就是说，利用数据本地化的有点，能够是fork/join算法优于其他的算法，即便是在单核处理器上。</li>\n</ol>\n<h2 id=\"工作偷窃\"><a href=\"#工作偷窃\" class=\"headerlink\" title=\"工作偷窃\"></a>工作偷窃</h2><p>　fork/join框架的核心在于他的轻量级调度机制。 FJTask采用了一种由Cilk语言最先开创的工作偷窃调度机制的基本策略。</p>\n<ul>\n<li>每个工作线程在它自己的调度队列里面维护一个可运行的任务</li>\n<li>队列是作为双端队列来维护的，同时支持LIFO（后进先出）和FIFO（先进先出）操作</li>\n<li>在给定的工作线程中由任务生成的子任务都会被放进工作线程自己的双端队列当中</li>\n<li>工作线程通过LIFO的方式来处理他们自己的双端队列，也就是通过pop的形式取出最后放进去的任务</li>\n<li>当一个工作线程自己的双端队列当中没有任务可以执行的时候，它就会尝试随机地从其他工作线程的任务队列中通过FIFO的方式来获取任务，这种方式也可以称作为偷任务</li>\n<li>当一个工作线程遇到了<code>join</code>操作，？？？</li>\n<li>当一个工作线程没有自己的任务可做并且 从其他线程队列当中偷窃任务失败的时候，它将会暂时停歇然后继续尝试做任务直到左右的线程都是相同的空闲状态。在这种情况下所有的线程都会被阻塞直到其他线程从顶级层级被激活。？？？</li>\n</ul>\n<p>　　就像在其他文档当中描述的那样，每个工作线程通过LIFO的规则从自己的工作队列当中过去任务，然而去偷窃任务的时候用的是FIFO的规则，这是一种对广泛使用递归方式的fork/join的优化设计。不正式而言，这种设计提供了两种基本的优势：</p>\n<blockquote>\n<ol>\n<li>作为双端队列的拥有者，偷窃者通过在反方向的操作将会减少拥有者和偷窃者在获取任务时候的冲突。同时这样也利用到了递归分而治之算法会导致先产生大任务的特点。因此，通过偷窃线程，最先被偷窃到的任务是有可能被分担到更多的工作的，也会导致进一步递归的分解<br>2.作为这些规则的结果，相对于那些粗粒度的或者没有利用递归分解任务的程序而言，那些具有相对小任务粒度的程序会有运行更快的趋势。即使在多数的fork/join程序当中有相对少的任务会被偷窃，创建细粒度任务意味着当工作线程更有获取到它的可能性。</li>\n</ol>\n</blockquote>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><p>　　这个框架用了大约800行存java代码来实现，主要都在FJTaskRunner这个类当中，它是<code>java.lang.Thread</code>的子类。 <code>FJTasks</code>本身仅仅包含了完成状态及时通过委托他们当前工作线程来执行其他操作。<code>FJTaskRunnerGroup</code>类用来构建工作线程，维护一些共享状态以及帮组协调启动和关闭。<br>更过的实现文档在<code>util.concurrent</code>包中可以获得。本节内容仅仅讨论实现这个框架过程中遇到的问题和解决方案，问题包含： 支持有效的双端队列操作（<code>push</code>,<code>pop</code>,<code>take</code>）； 管理线程获取新任务的偷窃协议。</p>\n<h2 id=\"双端队列\"><a href=\"#双端队列\" class=\"headerlink\" title=\"双端队列\"></a>双端队列</h2><p>　　为了有效和可扩展性执行任务，任务管理必须被设计的尽可能的快。创建，推送以及后来的获取（不常发生的偷窃）任务和顺序执行程序的过程调用一样都是需要开销的。更少的开销能够让程序员采取更小的任务粒度，更小的任务粒度反过来又能获得好的并行性。<br>任务分配本身是JVM的责任。 java垃圾收集器允许我们创建一个特殊目的的内存分配器来维护任务。 如此一来，相比通过其他语言来实现<code>FJTasks</code>，通过java语言来实现将会大幅减少复杂度和代码量。<br>双端队列的基本结构是通过单数组来构建的普通结构，每个双端队列有两个索引； <code>top</code> 索引的行为就像一个基于数组栈指示器，做<code>push</code>和<code>pop</code>操作的时候会改变该值。 <code>base</code>索引只有<code>take</code>操作的时候才会改变。由于<code>FJTaskRunner</code>里面的操作都是和双端队列里面的细节紧密相关的（比如，<code>fork</code>就是简单的调用<code>push</code>操作），所以双端队列这个数据机构就嵌套在这个类当中，而不是独立一个组件。<br>　　由于双端队列这个数组会同时被多个线程访问，有时候还不能完全具有同步机制，又由于一个独立的JAVA数组元素不能被申明成<code>volatile</code>，所以每个数组元素实际上一个固定的引用，这个引用对象维护着一个<code>volatile</code>引用。 当初做出这个决定主要是为了兼容JAVA内存规则，但是这种间接的引用最后被证明在测试平台上能够提高性能，推测起来大概是由于访问附近元素减少了缓存竞争，而这种附近元素的分布由于间接引用的关系在内存变得更加均匀。<br>　　实现双端队列的主要困难围绕了同步机制和同步机制的终止。即使在已经优化过同步机制设施的JVM上，为每个<code>push</code>和<code>pop</code>操作获取锁都会成为一个瓶颈。 然而，在Cilk语言中采用策略的改版提供了一个解决办法，这个解决办法基于以下几个准则：</p>\n<blockquote>\n<ul>\n<li><code>push</code>和<code>pop</code>操作只能有拥有者线程来触发</li>\n<li>通过在<code>take</code>操作上加上进入锁，很容易在同一时刻限制只有偷窃线程来执行<code>take</code>操作。（必要时，双端队列的锁也能禁用<code>take</code>操作） 因此，冲突控制的问题就缩小为两个部分的同步机制问题了</li>\n<li>只有在双端队列即将要变空的情况下，<code>pop</code>和<code>take</code>操作才会有冲突。其他情况下，都能保证这两个操作是在相互独立的元素上进行操作的</li>\n</ul>\n</blockquote>\n<p>　　如果双端队列里面确保多于一个元素的话，将<code>pop</code>和<code>base</code>这两个索引定义为<code>volatile</code>变量能够保证<code>pop</code>和<code>take</code>这两个操作不需要加锁。这是通过一种类似于戴克斯特拉算法来做到的，在这种算法当中， <code>push</code>会提前递减<code>top</code>变量：<code>if (--top &gt;= base) ...</code>以及<code>take</code>会提前增加<code>base</code>变量：<code>if(++base &lt; top) ...</code><br>在这两个情况下，必须要在随后比较这两个索引来判断操作是否会导致双端队列为空。一个部队称的规则被用来处理潜在的冲突： <code>pop</code>操作会再检查状态并且在获得了双端队列锁之后继续操作（这把锁也是<code>take</code>操作需要持有的锁）, 只有在双端队列真的为空的情况下，<code>pop</code>操作才会回退。相反， <code>take</code>操作会立即回退，通常来说他们会去尝试从其他的队列中去偷窃任务。这种不对称也是和Cilk语言中的协议差别最大的一点。？？？<br>　　除非双端队列将要溢出，否则<code>volatile</code>变量索引的使用使得在做<code>push</code>操作的时候也不需要同步机制。如果双端队列真的将要溢出，<code>push</code>操作必须要获取到双端队列锁来进行扩容数组。否则，简单的确保只有在双端队列数组在<code>take</code>操作的时候被填满时才去更新。\n　　</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjj4k26db0000v0hcv2ogmiyc","category_id":"cjj4k26dk0003v0hct2msz3vq","_id":"cjj4k26dq0008v0hchih0fh6j"}],"PostTag":[{"post_id":"cjj4k26db0000v0hcv2ogmiyc","tag_id":"cjj4k26dl0004v0hctqtomlxo","_id":"cjj4k26dr0009v0hcge5wjxzd"},{"post_id":"cjj4k26db0000v0hcv2ogmiyc","tag_id":"cjj4k26dp0007v0hcg20rtc4f","_id":"cjj4k26dr000av0hcdotmssd7"}],"Tag":[{"name":"java","_id":"cjj4k26dl0004v0hctqtomlxo"},{"name":"译文","_id":"cjj4k26dp0007v0hcg20rtc4f"}]}}